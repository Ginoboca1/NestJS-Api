var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AdminsController.html",[0,1.512,1,2.285]],["body/controllers/AdminsController.html",[0,1.165,1,2.584,2,1.085,3,0.236,4,0.21,5,0.21,6,2.228,7,1.76,8,2.763,9,0.29,10,1.389,11,2.162,12,3.271,13,3.271,14,2.635,15,3.883,16,1.487,17,0.026,18,3.271,19,2.635,20,2.078,21,3.41,22,3.374,23,2.439,24,3.758,25,4.916,26,2.878,27,3.374,28,3.374,29,3.068,30,3.531,31,0.869,32,2.635,33,1.389,34,0.702,35,0.51,36,0.996,37,3.594,38,1.389,39,1.987,40,2.635,41,2.228,42,3.757,43,2.635,44,2.635,45,2.635,46,0.72,47,1.76,48,0.552,49,2.154,50,2.228,51,1.6,52,1.467,53,1.96,54,0.678,55,1.253,56,1.467,57,1.96,58,1.76,59,2.553,60,1.96,61,1.76,62,3.883,63,3.062,64,1.085,65,2.635,66,2.635,67,0.236,68,0.115,69,1.353,70,1.6,71,2.635,72,2.878,73,2.878,74,2.635,75,2.584,76,3.41,77,3.757,78,1.987,79,2.635,80,2.349,81,1.299,82,2.878,83,1.593,84,2.635,85,2.878,86,2.349,87,1.71,88,2.635,89,2.635,90,2.635,91,0.014,92,0.014]],["title/modules/AdminsModule.html",[93,1.314,94,2.077]],["body/modules/AdminsModule.html",[1,3.821,2,2.128,3,0.358,4,0.319,5,0.319,17,0.026,34,0.937,46,0.773,48,0.839,49,3.566,50,3.387,67,0.358,68,0.174,91,0.019,92,0.019,93,2.198,94,3.89,95,1.905,96,1.905,97,2.23,98,2.23,99,1.905,100,3.185,101,2.23,102,3.387,103,3.387,104,2.877,105,2.23,106,2.23,107,4.006,108,4.006,109,2.433,110,1.438,111,0.727,112,2.877,113,2.98,114,1.771,115,3.138,116,3.387,117,2.433,118,3.451,119,2.433,120,2.877,121,3.387]],["title/injectables/AdminsService.html",[49,1.904,122,0.717]],["body/injectables/AdminsService.html",[3,0.314,4,0.28,5,0.28,9,0.387,10,1.703,11,2.374,12,4.856,13,4.856,17,0.026,20,1.592,25,4.01,31,1.205,33,1.263,34,0.638,35,0.464,36,0.905,38,1.703,42,2.349,46,0.724,48,0.737,49,2.64,67,0.314,68,0.153,78,2.435,81,1.592,83,1.953,87,2.096,91,0.018,92,0.018,110,1.263,111,0.638,113,2.616,114,1.554,116,2.974,122,0.994,123,1.448,124,2.974,125,2.255,126,2.616,127,4.217,128,4.537,129,3.517,130,3.527,131,3.517,132,3.835,133,3.517,134,2.349,135,2.349,136,1.806,137,2.974,138,3.167,139,3.517,140,3.991,141,2.974,142,2.974,143,2.974,144,2.349,145,2.435,146,4.01,147,5.365,148,3.517]],["title/modules/AppModule.html",[93,1.314,149,2.285]],["body/modules/AppModule.html",[2,1.504,3,0.327,4,0.291,5,0.291,17,0.026,46,0.791,48,0.765,67,0.327,68,0.159,91,0.018,92,0.018,93,2.101,94,3.792,95,1.737,96,1.737,97,2.033,98,2.033,99,1.737,100,2.708,101,2.033,104,2.708,105,2.033,106,2.033,109,2.218,110,1.311,117,2.954,149,4.49,150,3.088,151,3.088,152,3.792,153,3.792,154,3.477,155,3.652,156,4.113,157,2.717,158,4.864,159,3.088,160,3.652,161,3.652,162,3.088,163,3.652,164,3.652,165,3.652,166,3.652,167,3.652,168,3.652,169,3.652,170,2.439,171,3.652]],["title/controllers/AuthController.html",[0,1.512,172,2.285]],["body/controllers/AuthController.html",[0,1.174,2,1.094,3,0.238,4,0.212,5,0.212,7,1.774,9,0.292,10,1.397,11,2.168,15,3.893,16,1.495,17,0.026,20,1.703,22,2.599,23,2.382,27,3.387,28,3.387,29,3.08,30,3.63,31,0.874,33,1.397,34,0.706,35,0.513,36,1.002,37,4.073,38,1.397,46,0.704,47,1.774,48,0.556,51,1.613,58,1.774,61,1.774,62,3.768,63,3.076,64,1.094,67,0.238,68,0.116,69,1.364,75,2.599,77,3.606,80,2.363,81,0.892,83,1.602,86,2.363,87,1.72,91,0.014,92,0.014,111,0.979,114,1.174,172,2.599,173,2.246,174,2.656,175,2.167,176,3.245,177,2.656,178,2.824,179,2.656,180,3.892,181,3.426,182,3.426,183,3.278,184,2.772,185,2.656,186,2.656,187,2.797,188,2.246,189,2.656,190,4.288,191,3.291,192,3.291,193,1.998,194,3.291,195,2.656,196,2.656,197,2.564,198,2.191,199,1.976,200,2.246,201,2.246,202,1.774,203,2.656,204,1.613,205,1.613,206,2.656,207,2.656,208,2.656,209,2.656,210,2.656,211,2.656,212,1.976,213,2.656,214,2.656,215,2.656,216,2.246,217,2.656,218,2.656]],["title/modules/AuthModule.html",[93,1.314,152,2.077]],["body/modules/AuthModule.html",[2,2.01,3,0.328,4,0.293,5,0.293,17,0.026,34,0.666,46,0.783,48,0.77,67,0.328,68,0.16,91,0.018,92,0.018,93,2.107,95,1.747,96,1.747,97,2.045,98,2.045,99,1.747,100,3.053,101,2.045,104,2.718,105,2.045,106,2.045,109,2.23,110,1.319,111,0.666,112,2.718,117,2.23,118,2.453,119,2.23,120,2.045,152,4.024,170,2.453,172,3.662,198,2.975,199,2.732,219,3.106,220,3.106,221,3.798,222,3.798,223,3.673,224,3.673,225,3.106,226,3.673,227,2.453,228,3.673,229,3.673,230,3.673,231,3.673,232,2.732,233,2.453,234,3.673,235,3.673,236,3.673]],["title/injectables/AuthService.html",[122,0.717,198,1.627]],["body/injectables/AuthService.html",[3,0.234,4,0.209,5,0.209,9,0.288,10,1.383,11,2.335,17,0.026,20,1.534,31,1.132,33,1.809,34,1.053,35,0.665,36,1.296,38,1.641,39,2.346,46,0.719,48,0.549,54,1.176,67,0.234,68,0.114,81,1.949,83,2.21,87,2.02,91,0.014,92,0.014,110,0.94,111,0.914,119,2.339,122,0.807,123,1.079,125,1.832,126,1.948,127,3.365,130,2.865,134,1.749,135,1.749,136,1.345,137,2.215,138,2.573,145,2.346,175,2.145,176,3.125,181,2.865,183,2.339,184,1.978,188,3.257,193,2.756,194,2.215,197,2.145,198,1.832,200,2.215,201,2.215,225,2.215,227,1.749,232,1.948,233,1.749,237,2.215,238,3.852,239,3.052,240,4.26,241,2.619,242,3.852,243,3.365,244,2.619,245,2.619,246,3.852,247,1.261,248,2.481,249,2.619,250,1.948,251,1.948,252,1.948,253,1.948,254,2.619,255,1.948,256,4.569,257,3.852,258,2.215,259,1.59,260,3.852,261,2.619,262,2.619,263,3.852,264,2.619,265,3.852,266,2.619,267,3.852,268,2.619,269,2.619,270,2.215,271,2.215,272,1.158,273,2.619,274,2.215,275,2.619,276,2.619]],["title/interfaces/ExtendedUser.html",[277,1.512,278,2.545]],["body/interfaces/ExtendedUser.html",[3,0.43,4,0.383,5,0.383,9,0.528,17,0.025,35,0.634,46,0.58,67,0.43,91,0.021,92,0.021,111,1.17,247,1.396,277,2.124,278,4.306,279,2.918,280,4.064,281,3.21,282,2.754,283,1.944,284,5.453]],["title/interfaces/IPost.html",[277,1.512,285,2.077]],["body/interfaces/IPost.html",[3,0.394,4,0.351,5,0.351,9,0.484,17,0.025,35,0.826,36,1.732,67,0.394,91,0.02,92,0.02,247,1.551,277,1.948,279,2.675,283,1.843,285,3.333,286,3.726,287,4.655,288,3.8,289,3.8,290,3.484]],["title/injectables/JwtAuthGuard.html",[56,1.904,122,0.717]],["body/injectables/JwtAuthGuard.html",[3,0.441,4,0.393,5,0.393,17,0.025,46,0.71,48,1.033,56,3.273,67,0.441,68,0.215,91,0.022,92,0.022,122,1.232,123,2.031,282,2.796,291,4.17,292,3.668,293,5.879,294,4.17,295,2.994]],["title/injectables/JwtStrategy.html",[122,0.717,221,2.077]],["body/injectables/JwtStrategy.html",[3,0.367,4,0.327,5,0.327,9,0.451,10,1.885,11,2.224,17,0.026,20,1.379,31,1.179,33,1.474,34,0.952,35,0.542,36,1.057,38,1.474,39,2.108,46,0.699,48,0.86,54,1.057,67,0.367,68,0.179,91,0.019,92,0.019,122,1.1,123,1.691,125,2.753,221,3.188,233,2.742,239,2.742,271,3.471,272,1.815,282,2.497,295,2.493,296,3.471,297,4.439,298,4.439,299,4.105,300,5.25,301,4.105,302,4.105,303,3.471,304,3.054,305,3.471,306,3.471,307,4.105,308,4.105,309,4.105,310,3.471,311,4.105,312,4.105,313,4.105,314,4.105]],["title/injectables/LocalAuthGuard.html",[122,0.717,202,2.285]],["body/injectables/LocalAuthGuard.html",[3,0.441,4,0.393,5,0.393,17,0.025,46,0.71,48,1.033,67,0.441,68,0.215,91,0.022,92,0.022,122,1.232,123,2.031,202,3.927,282,2.796,292,3.668,294,4.17,295,2.994,315,4.17,316,5.879]],["title/injectables/LocalStrategy.html",[122,0.717,222,2.077]],["body/injectables/LocalStrategy.html",[3,0.333,4,0.297,5,0.297,9,0.409,10,1.769,11,2.122,17,0.026,20,1.251,31,1.107,33,1.769,34,1.002,35,0.65,36,1.268,38,1.337,46,0.709,48,0.78,54,0.958,67,0.333,68,0.162,69,1.912,81,1.251,83,1.534,87,1.646,91,0.018,92,0.018,111,0.894,119,2.262,122,1.032,123,1.534,125,1.771,132,3.291,145,1.912,193,2.53,198,2.987,199,2.77,222,2.992,247,1.411,248,2.597,250,3.665,272,1.646,274,3.149,282,2.344,295,2.262,297,4.166,298,4.166,303,3.149,304,2.77,305,3.149,306,3.149,317,3.149,318,3.724,319,3.724,320,4.927,321,3.724,322,3.149,323,3.724,324,3.724,325,3.724]],["title/classes/Login.html",[68,0.149,175,1.904]],["body/classes/Login.html",[3,0.309,4,0.275,5,0.275,8,1.773,9,0.38,16,1.8,17,0.026,23,2.456,31,1.052,34,0.626,35,0.618,46,0.642,54,1.467,55,1.642,64,1.422,67,0.419,68,0.231,91,0.017,92,0.017,111,0.626,175,2.959,176,1.922,184,1.773,193,3.226,247,1.412,248,2.777,282,1.642,283,1.573,326,1.642,327,3.954,328,2.568,329,3.452,330,3.954,331,3.452,332,3.452,333,4.494,334,3.452,335,3.227,336,3.806,337,3.954,338,2.919,339,3.128,340,1.922,341,3.815,342,3.42,343,2.096,344,2.096,345,1.773,346,2.919,347,2.919,348,2.919,349,2.919,350,2.919,351,2.919,352,2.919,353,2.919,354,2.919,355,2.919]],["title/classes/Post.html",[68,0.149,114,1.512]],["body/classes/Post.html",[3,0.299,4,0.266,5,0.266,9,0.367,16,2.263,17,0.026,31,1.323,35,0.867,36,1.178,46,0.631,67,0.467,68,0.145,81,1.121,91,0.017,92,0.017,110,1.199,111,1.068,113,2.484,114,2.024,115,2.028,120,2.549,136,2.351,170,4.348,247,1.516,283,1.537,288,3.172,289,3.172,290,2.908,326,1.588,356,2.23,357,2.908,358,3.489,359,4.979,360,5.505,361,3.339,362,3.871,363,3.339,364,3.339,365,3.339,366,4.578,367,3.339,368,5.143,369,2.824,370,3.405,371,2.824,372,3.339,373,2.824]],["title/classes/PostDto.html",[68,0.149,374,2.285]],["body/classes/PostDto.html",[3,0.323,4,0.288,5,0.288,9,0.397,16,2.231,17,0.026,23,2.482,31,1.304,35,0.766,46,0.583,64,1.488,67,0.323,68,0.21,91,0.018,92,0.018,247,1.451,283,1.621,287,3.592,288,3.302,289,3.86,290,3.539,326,1.718,335,3.525,336,3.877,339,3.225,340,2.011,341,3.674,342,3.232,343,2.932,344,2.932,345,2.479,357,3.028,374,3.225,375,3.055,376,3.613,377,3.613,378,3.055,379,4.909,380,3.613,381,4.083,382,3.613,383,3.613,384,4.083]],["title/classes/PostUpdateDto.html",[68,0.149,385,2.545]],["body/classes/PostUpdateDto.html",[3,0.313,4,0.279,5,0.279,9,0.385,16,2.202,17,0.026,23,2.464,31,1.287,35,0.756,36,1.65,46,0.57,64,1.44,67,0.313,68,0.206,91,0.018,92,0.018,247,1.44,283,1.587,287,4.452,288,3.249,289,3.828,290,3.51,326,1.664,335,3.249,336,3.997,340,1.947,341,3.634,342,3.19,343,2.869,344,2.869,345,2.426,378,3.995,379,4.845,381,3.995,384,4.524,385,3.515,386,5.06,387,2.958,388,3.498,389,3.498,390,3.498,391,3.498]],["title/controllers/PostsController.html",[0,1.512,392,2.285]],["body/controllers/PostsController.html",[0,0.437,2,0.407,3,0.088,4,0.079,5,0.079,7,0.66,9,0.109,10,0.625,11,2.211,15,3.875,16,1.558,17,0.026,20,1.641,21,0.735,22,3.342,23,2.529,24,4,26,0.735,27,3.478,28,3.478,29,3.162,30,3.686,31,0.911,33,1.597,34,0.735,35,0.535,36,1.043,37,4.075,38,1.983,39,1.958,42,3.807,46,0.557,47,0.66,48,0.207,51,0.6,52,0.55,53,0.735,54,0.254,55,0.47,56,0.55,57,0.735,58,0.66,59,0.969,60,0.735,61,0.66,62,4.033,63,2.848,64,0.407,67,0.088,68,0.043,69,0.508,70,0.6,72,0.735,73,0.735,75,2.707,76,0.735,77,4.01,78,0.508,80,2.462,81,1.494,82,3.43,83,1.669,85,2.09,86,2.462,87,1.792,91,0.006,92,0.006,111,0.51,114,2.654,145,0.894,178,2.476,182,1.295,183,1.057,184,0.894,187,2.888,190,2.375,191,1.472,197,2.567,204,0.6,205,0.6,212,1.295,247,1.208,259,2.315,272,2.377,285,1.706,290,0.55,345,0.894,357,2.476,358,1.876,374,1.876,392,1.162,393,0.836,394,1.972,395,1.972,396,1.972,397,1.472,398,1.972,399,1.295,400,2.332,401,1.972,402,0.988,403,0.988,404,2.809,405,3.761,406,1.472,407,0.988,408,3.224,409,0.988,410,0.836,411,0.988,412,2.836,413,4.022,414,4.403,415,2.375,416,0.988,417,0.836,418,0.988,419,2.987,420,2.332,421,1.295,422,2.375,423,0.988,424,2.708,425,0.836,426,0.988,427,2.809,428,1.472,429,0.988,430,0.988,431,0.836,432,2.987,433,3.428,434,0.988,435,0.988,436,0.988,437,1.162,438,1.162,439,2.987,440,2.09,441,2.09,442,0.735,443,0.988,444,1.472,445,0.988,446,0.988,447,0.988,448,2.809,449,1.74,450,0.988,451,0.988,452,1.972,453,0.988,454,0.988,455,2.987,456,0.988,457,0.836,458,2.332,459,0.836,460,1.298,461,0.836,462,0.988,463,0.988,464,0.988,465,0.735,466,0.988,467,0.836,468,0.836,469,0.988,470,0.988,471,0.988,472,1.74,473,1.74,474,0.988,475,0.988,476,0.988,477,0.988,478,0.988,479,0.988,480,0.988,481,0.988,482,0.836,483,0.836,484,0.988,485,0.836,486,2.375,487,1.472,488,0.988,489,0.988,490,0.836,491,0.988,492,0.988,493,0.988,494,0.988]],["title/modules/PostsModule.html",[93,1.314,153,2.077]],["body/modules/PostsModule.html",[2,2.116,3,0.355,4,0.316,5,0.316,17,0.026,34,0.72,46,0.772,48,0.832,67,0.355,68,0.173,91,0.019,92,0.019,93,2.189,95,1.888,96,1.888,97,2.21,98,2.21,99,1.888,100,3.171,101,2.21,104,2.86,105,2.21,106,2.21,109,2.411,110,1.426,114,1.755,115,3.12,117,3.12,118,2.652,120,2.21,121,3.357,153,4.003,154,3.558,392,3.804,460,3.558,461,3.357,495,3.357,496,3.97,497,3.357,498,3.97,499,3.97,500,3.357,501,3.97]],["title/injectables/PostsService.html",[122,0.717,460,1.904]],["body/injectables/PostsService.html",[3,0.139,4,0.123,5,0.123,8,1.312,9,0.17,10,0.917,11,2.423,17,0.026,20,1.671,31,1.159,33,1.852,34,0.936,35,0.657,36,1.328,38,1.787,39,2.312,42,3.638,46,0.505,48,0.325,54,0.973,67,0.139,68,0.067,78,0.796,81,1.985,83,2.188,87,2.505,91,0.016,92,0.009,110,0.556,111,0.281,114,2.28,122,0.535,123,0.638,125,0.737,127,2.526,128,2.16,132,2.526,134,1.706,135,1.035,136,0.796,138,1.035,144,2.177,145,2.91,183,1.98,184,1.674,187,1.551,197,2.507,247,1.438,259,2.541,270,1.31,272,2.105,284,1.31,285,2.297,288,2.297,289,1.98,290,2.106,345,1.312,357,2.872,358,2.795,394,2.757,396,2.16,397,2.16,398,2.16,401,2.16,406,1.31,412,1.153,417,2.16,419,1.31,421,1.153,422,1.31,424,3.808,425,2.16,428,1.31,431,2.16,432,3.198,433,4.027,437,1.035,438,1.035,439,3.538,440,2.813,441,1.901,452,4.362,460,1.422,467,1.31,500,1.31,502,1.31,503,2.555,504,2.555,505,2.555,506,1.549,507,1.549,508,1.549,509,1.549,510,2.555,511,4.503,512,1.549,513,1.549,514,2.555,515,1.549,516,1.549,517,1.549,518,2.555,519,1.549,520,2.555,521,1.549,522,2.16,523,1.549,524,1.549,525,1.549,526,1.549,527,2.555,528,1.549,529,1.549,530,1.549,531,1.549,532,2.555,533,1.549,534,1.549,535,3.26,536,2.16,537,1.549,538,2.555,539,1.549,540,2.555,541,1.549,542,2.555,543,3.26,544,1.549,545,2.757,546,1.31,547,1.549,548,1.549,549,1.549,550,2.555,551,1.549,552,1.31,553,2.555,554,1.549,555,1.549,556,1.549,557,1.549,558,1.549,559,1.549,560,1.549,561,2.555,562,1.549,563,2.555,564,2.555,565,1.549,566,1.549,567,2.555,568,1.549]],["title/guards/RolesGuard.html",[59,1.904,569,2.545]],["body/guards/RolesGuard.html",[3,0.342,4,0.304,5,0.304,9,0.42,10,1.799,17,0.026,20,1.683,31,1.126,33,1.799,34,0.909,35,0.661,36,1.29,38,1.372,46,0.717,48,0.801,52,2.79,54,0.983,55,1.817,59,2.79,67,0.342,68,0.166,69,1.962,70,2.32,81,1.878,91,0.019,92,0.019,111,0.693,122,1.05,125,1.817,156,5.348,157,2.842,205,3.043,310,3.231,570,3.821,571,3.231,572,5.935,573,3.821,574,3.821,575,5.011,576,5.935,577,3.821,578,3.821,579,5.011,580,2.842,581,3.821,582,3.821,583,3.821,584,3.821,585,3.821,586,3.821,587,3.821,588,3.821]],["title/classes/SignUp.html",[68,0.149,176,1.904]],["body/classes/SignUp.html",[3,0.276,4,0.246,5,0.246,8,2.224,9,0.339,16,2.087,17,0.026,23,2.462,31,1.22,34,0.908,35,0.716,36,1.115,46,0.604,54,1.601,55,1.466,64,1.269,67,0.387,68,0.218,91,0.016,92,0.016,111,0.786,175,3.185,176,2.411,184,2.224,193,3.129,247,1.397,248,2.693,282,2.06,283,1.454,326,1.466,327,3.724,328,2.293,330,3.724,333,4.234,335,3.04,336,3.627,337,3.724,338,2.607,339,2.893,340,1.716,341,3.7,342,3.303,343,2.63,344,2.63,345,2.224,346,2.607,347,3.662,348,3.662,349,3.662,350,3.662,351,3.662,352,3.662,353,3.662,354,3.662,355,2.607,589,3.083,590,4.331,591,3.083,592,2.607,593,3.083,594,3.083,595,3.083,596,3.083,597,3.083,598,3.083]],["title/classes/UpdateUserDto.html",[68,0.149,599,2.077]],["body/classes/UpdateUserDto.html",[3,0.301,4,0.268,5,0.268,8,2.363,9,0.37,16,2.167,17,0.026,23,2.442,31,1.267,34,0.951,35,0.744,36,1.635,46,0.633,54,1.635,55,1.6,64,1.385,67,0.301,68,0.2,70,4.029,91,0.017,92,0.017,111,0.835,193,3.032,247,1.369,248,2.61,281,2.247,283,1.545,326,1.6,330,3.423,335,2.794,337,3.423,339,3.944,340,1.873,341,3.585,342,3.394,343,2.794,344,2.794,345,2.363,592,3.891,599,2.794,600,4.993,601,3.365,602,3.365,603,3.365,604,3.365,605,3.365,606,3.365]],["title/classes/User.html",[68,0.149,111,0.62]],["body/classes/User.html",[3,0.314,4,0.28,5,0.28,9,0.387,16,2.207,17,0.026,31,1.29,34,0.973,35,0.858,46,0.648,54,1.652,55,1.673,67,0.48,68,0.153,81,1.181,91,0.018,92,0.018,110,1.263,111,0.86,112,1.958,120,2.64,136,1.806,170,4.288,193,2.755,247,1.519,248,2.372,283,1.592,326,1.673,359,4.856,360,5.223,362,2.974,368,5.07,369,2.974,370,3.527,437,3.167,465,2.616,607,2.349,608,4.742,609,3.517,610,3.517,611,3.517,612,4.742,613,3.517,614,2.974,615,2.974]],["title/interfaces/UserPayload.html",[243,2.285,277,1.512]],["body/interfaces/UserPayload.html",[3,0.416,4,0.371,5,0.371,9,0.512,17,0.025,34,1.157,35,0.808,54,1.642,67,0.416,91,0.021,92,0.021,243,3.792,247,1.539,255,3.462,272,2.82,277,2.057,279,2.826,281,3.108,283,1.906]],["title/interfaces/UserRequest.html",[178,1.904,277,1.512]],["body/interfaces/UserRequest.html",[3,0.424,4,0.377,5,0.377,9,0.521,17,0.025,34,0.859,35,0.815,54,1.219,67,0.424,91,0.021,92,0.021,111,1.164,178,3.195,204,2.877,205,3.485,247,1.387,272,2.094,277,2.094,279,2.877,282,2.73,283,1.927,616,4.006,617,5.739]],["title/controllers/UsersController.html",[0,1.512,618,2.285]],["body/controllers/UsersController.html",[0,0.704,2,0.656,3,0.142,4,0.127,5,0.127,7,1.063,9,0.175,10,0.938,11,2.155,15,3.813,16,1.478,17,0.026,18,2.209,20,1.801,21,1.944,22,3.361,23,2.516,24,3.989,26,1.184,27,3.361,28,3.361,29,3.056,30,3.57,31,0.864,33,1.381,34,0.697,35,0.602,36,0.99,37,4.017,38,1.381,39,1.974,41,1.346,46,0.647,47,1.063,48,0.334,51,0.967,52,0.886,53,1.184,54,0.855,55,0.757,56,0.886,57,1.184,58,1.063,59,2.364,60,1.184,61,1.063,62,4.017,63,2.836,64,0.656,67,0.142,68,0.069,69,0.818,70,0.967,72,3.394,73,2.86,75,2.568,76,1.944,77,3.974,78,0.818,80,2.335,81,1.426,82,3.394,83,1.583,85,1.944,86,2.335,87,1.7,91,0.01,92,0.01,111,1.128,140,3.585,178,2.683,182,1.944,187,3.056,192,3.251,197,2.54,204,0.967,205,0.967,212,1.944,247,1.171,248,1.155,259,2.335,272,2.598,358,1.745,395,2.209,399,1.944,405,2.209,408,3.251,410,1.346,412,3.158,413,4.255,414,4.255,415,2.81,442,1.184,444,1.346,455,3.251,457,1.346,459,1.346,465,1.944,468,1.346,482,1.346,483,1.346,485,1.346,486,3.59,487,1.346,490,1.346,599,2.578,618,1.745,619,1.346,620,2.613,621,2.81,622,2.613,623,1.592,624,1.592,625,1.592,626,1.592,627,1.592,628,2.613,629,1.592,630,1.592,631,1.592,632,1.592,633,1.592,634,2.209,635,1.592,636,1.592,637,1.592,638,1.85,639,1.346,640,1.346,641,1.592,642,1.592,643,1.592,644,1.592,645,1.592,646,1.346,647,1.346,648,1.592,649,1.592,650,1.592]],["title/modules/UsersModule.html",[93,1.314,154,1.904]],["body/modules/UsersModule.html",[2,2.029,3,0.333,4,0.297,5,0.297,17,0.026,34,0.676,46,0.773,48,0.78,67,0.333,68,0.162,91,0.018,92,0.018,93,2.122,95,1.771,96,1.771,97,2.073,98,2.073,99,1.771,100,3.074,101,3.074,104,2.743,105,2.073,106,2.073,109,2.262,110,1.337,111,0.676,112,2.743,117,2.262,118,2.487,119,2.262,120,2.073,154,3.728,198,2.987,618,3.688,638,3.753,639,3.149,651,3.149,652,3.149,653,3.149,654,3.813,655,3.724,656,3.724,657,3.149,658,3.724,659,3.724]],["title/injectables/UsersService.html",[122,0.717,638,1.904]],["body/injectables/UsersService.html",[3,0.224,4,0.2,5,0.2,8,1.289,9,0.276,10,1.34,11,2.414,17,0.026,20,1.657,30,1.524,31,1.185,33,1.772,34,0.895,35,0.651,36,1.27,38,1.772,39,2.288,46,0.637,48,0.526,54,0.961,67,0.224,68,0.109,78,1.289,80,1.524,81,1.771,83,2.032,86,1.524,87,2.6,91,0.014,92,0.014,110,0.901,111,1.067,122,0.782,123,1.034,125,1.194,126,1.867,127,3.296,130,2.777,132,2.493,134,1.676,135,1.676,136,1.917,138,1.676,140,3.671,141,2.122,142,3.156,143,2.122,144,1.676,145,3.02,146,2.122,183,2.267,184,1.917,187,2.706,197,2.747,247,1.412,248,1.109,250,1.867,258,3.768,259,2.706,272,1.97,399,2.777,442,2.777,522,2.122,536,2.122,545,2.122,546,2.122,552,2.122,599,2.996,621,3.156,634,2.122,638,2.078,640,2.122,646,2.122,647,2.122,657,2.122,660,2.122,661,4.934,662,3.733,663,2.51,664,2.51,665,2.51,666,3.733,667,2.51,668,3.733,669,4.934,670,2.51,671,3.733,672,2.51,673,2.51,674,2.51,675,2.51,676,2.51,677,2.51,678,3.733,679,2.51,680,2.51,681,2.51,682,2.51,683,3.733,684,2.51,685,2.51]],["title/injectables/ValidateToken.html",[122,0.717,654,2.077]],["body/injectables/ValidateToken.html",[3,0.384,4,0.342,5,0.342,9,0.472,10,1.939,17,0.026,20,1.441,31,1.213,33,1.939,34,0.979,35,0.712,36,1.39,38,1.541,46,0.652,48,0.899,67,0.384,68,0.187,69,2.204,91,0.02,92,0.02,122,1.131,123,1.767,125,2.041,181,3.192,227,2.866,232,3.192,233,2.866,239,3.606,240,5.242,247,1.327,654,3.765,686,3.629,687,4.292,688,4.292,689,5.399,690,4.292,691,4.292]],["title/coverage.html",[692,3.462]],["body/coverage.html",[0,2.326,1,1.92,5,0.229,6,2.431,17,0.026,35,0.379,49,1.601,52,1.601,56,1.601,59,1.601,68,0.26,91,0.015,92,0.015,99,1.368,111,0.748,112,1.601,114,1.271,115,1.746,122,1.303,124,2.431,144,4.645,145,1.476,172,1.92,173,2.431,175,1.601,176,1.601,178,1.601,198,1.368,202,1.92,204,1.746,221,1.746,222,1.746,237,2.431,243,1.92,251,2.139,252,2.139,253,3.066,255,2.139,277,2.463,278,2.139,280,2.431,281,3.218,285,1.746,286,2.431,291,2.431,292,3.066,296,2.431,315,2.431,317,2.431,327,3.066,328,3.066,356,2.753,374,1.92,375,2.431,385,2.139,386,2.431,387,2.431,392,1.92,393,2.431,460,1.601,502,2.431,569,2.139,571,2.431,580,2.139,599,1.746,600,2.431,607,2.753,616,2.431,618,1.92,619,2.431,638,1.601,654,1.746,660,2.431,686,2.431,692,2.139,693,2.875,694,2.875,695,2.875,696,4.122,697,4.122,698,6.22,699,2.875,700,2.431,701,2.875,702,6.22,703,5.971,704,3.485,705,5.798,706,4.122,707,2.875,708,2.875,709,3.485,710,2.875,711,2.875]],["title/dependencies.html",[96,1.955,712,2.422]],["body/dependencies.html",[17,0.026,48,0.871,51,3.535,64,1.712,68,0.23,91,0.02,92,0.02,96,1.977,110,1.493,136,2.135,157,3.092,159,3.515,162,3.515,227,2.776,239,2.776,295,2.524,304,4.33,322,3.515,340,2.314,713,4.157,714,5.821,715,4.157,716,4.157,717,4.157,718,4.157,719,5.292,720,4.157,721,4.157,722,4.157,723,4.157,724,4.157,725,4.157,726,4.157,727,4.157,728,4.157,729,4.157,730,4.157,731,4.157,732,4.157,733,4.157,734,4.157,735,4.157,736,4.157,737,4.157,738,4.157,739,4.157,740,4.157,741,4.157]],["title/miscellaneous/enumerations.html",[742,1.362,743,3.475]],["body/miscellaneous/enumerations.html",[8,3.066,9,0.557,17,0.025,54,1.537,91,0.022,92,0.022,111,1.083,438,4.242,742,2.408,743,4.281,744,5.063,745,5.063,746,5.972]],["title/miscellaneous/functions.html",[742,1.362,747,3.475]],["body/miscellaneous/functions.html",[9,0.581,17,0.023,91,0.023,92,0.023,99,3.075,700,4.469,742,2.514,747,4.469,748,5.285]],["title/index.html",[9,0.315,749,2.864,750,2.864]],["body/index.html",[4,0.313,17,0.026,23,1.507,29,2.382,78,2.014,91,0.019,92,0.019,342,3.153,357,2.184,421,2.918,692,2.918,751,3.923,752,3.923,753,5.098,754,3.923,755,3.923,756,3.923,757,3.923,758,3.923,759,5.663,760,3.923,761,3.923,762,3.923,763,3.923,764,6.485,765,3.923,766,3.923,767,3.923,768,6.37,769,3.923,770,3.923,771,5.098,772,3.923,773,3.923,774,3.923,775,3.923,776,5.098,777,5.098,778,3.923,779,3.923,780,3.923,781,5.098,782,5.098,783,3.923,784,3.923,785,3.923,786,3.923,787,3.923,788,3.317,789,3.923,790,3.923,791,3.923,792,3.923,793,3.923,794,3.923,795,3.923,796,3.923,797,3.923,798,3.923,799,3.923,800,3.923,801,3.923,802,3.923,803,3.317]],["title/modules.html",[95,2.214]],["body/modules.html",[17,0.022,91,0.022,92,0.022,94,2.994,95,2.345,149,3.293,152,2.994,153,2.994,154,2.745,788,5.619,804,6.645,805,6.645,806,6.645]],["title/overview.html",[807,3.935]],["body/overview.html",[2,1.517,17,0.025,49,3.057,91,0.018,92,0.018,93,1.415,94,3.698,95,1.752,96,1.752,97,2.05,98,2.05,99,1.752,100,2.05,101,2.05,102,3.114,103,3.114,104,2.723,105,2.05,106,2.05,123,1.517,149,4.429,150,3.114,151,3.114,152,3.987,153,3.879,154,3.722,198,2.783,219,3.114,220,3.114,221,3.334,222,3.334,279,2.236,326,1.752,440,2.74,460,3.057,495,3.114,497,3.114,569,2.74,638,3.556,651,3.114,652,3.114,653,3.114,654,3.334,807,3.114,808,4.891,809,3.683,810,3.683,811,3.683]],["title/properties.html",[283,1.38,712,2.422]],["body/properties.html",[17,0.025,23,2.007,91,0.023,92,0.023,283,1.754,357,2.908,803,4.416,812,5.223,813,5.223,814,5.223]],["title/miscellaneous/typealiases.html",[742,1.362,815,4.11]],["body/miscellaneous/typealiases.html",[9,0.567,17,0.022,35,0.681,91,0.022,92,0.022,356,3.448,370,4.493,371,5.107,607,3.448,614,5.107,742,2.455,816,5.162,817,4.365,818,4.365]],["title/miscellaneous/variables.html",[742,1.362,819,3.475]],["body/miscellaneous/variables.html",[9,0.442,11,1.544,17,0.026,20,1.739,35,0.53,52,2.883,54,1.557,81,1.739,83,1.655,91,0.019,92,0.019,112,2.883,115,3.144,216,4.378,247,1.359,248,2.289,251,3.852,252,4.501,253,2.989,356,2.684,373,3.398,437,4.282,438,4.282,441,2.989,580,3.852,607,2.684,615,3.398,704,3.398,709,4.844,742,1.911,817,3.398,818,3.398,819,3.398,820,5.178,821,5.178,822,4.018,823,5.178,824,4.018,825,4.018]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ExtendedUser.html":{},"interfaces/IPost.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":144,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":813,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":708,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":696,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":697,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":706,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":440,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"overview.html":{}}}],["1.0.0",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["1.6.2",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":441,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":714,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":716,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":22,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["3.0.1",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["3.1.1",{"_index":715,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":809,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["4.18.2",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":405,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["401",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["404",{"_index":24,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["5",{"_index":808,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":27,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["60d",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{}}}],["7",{"_index":811,"title":{},"body":{"overview.html":{}}}],["7.1.17",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":810,"title":{},"body":{"overview.html":{}}}],["_id",{"_index":284,"title":{},"body":{"interfaces/ExtendedUser.html":{},"injectables/PostsService.html":{}}}],["admin",{"_index":8,"title":{},"body":{"controllers/AdminsController.html":{},"classes/Login.html":{},"injectables/PostsService.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["admins",{"_index":25,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsService.html":{}}}],["admins'})@apiresponse({status",{"_index":43,"title":{},"body":{"controllers/AdminsController.html":{}}}],["admins.controller",{"_index":108,"title":{},"body":{"modules/AdminsModule.html":{}}}],["admins.service",{"_index":50,"title":{},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{}}}],["adminscontroller",{"_index":1,"title":{"controllers/AdminsController.html":{}},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"coverage.html":{}}}],["adminservice",{"_index":71,"title":{},"body":{"controllers/AdminsController.html":{}}}],["adminsmodule",{"_index":94,"title":{"modules/AdminsModule.html":{}},"body":{"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["adminsservice",{"_index":49,"title":{"injectables/AdminsService.html":{}},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsService.html":{},"coverage.html":{},"overview.html":{}}}],["al",{"_index":351,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{}}}],["aliases",{"_index":816,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["amazing",{"_index":789,"title":{},"body":{"index.html":{}}}],["apioperation",{"_index":63,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":341,"title":{},"body":{"classes/Login.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty({example",{"_index":597,"title":{},"body":{"classes/SignUp.html":{}}}],["apiresponse",{"_index":62,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":61,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('admin",{"_index":65,"title":{},"body":{"controllers/AdminsController.html":{}}}],["apitags('auth",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('posts",{"_index":464,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":641,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":766,"title":{},"body":{"index.html":{}}}],["applications",{"_index":758,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":149,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["assign",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":58,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":292,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.service",{"_index":658,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth/decorators/roles.decorators",{"_index":53,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["auth/guards/jwt",{"_index":57,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["auth/guards/roles.guard",{"_index":60,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["auth/jwt/jwt.validate",{"_index":659,"title":{},"body":{"modules/UsersModule.html":{}}}],["authcontroller",{"_index":172,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":294,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":293,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":316,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":152,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":357,"title":{},"body":{"classes/Post.html":{},"classes/PostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authors",{"_index":287,"title":{},"body":{"interfaces/IPost.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{}}}],["authservice",{"_index":198,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":83,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["axios",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["backers",{"_index":790,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":522,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('invalid",{"_index":682,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception('post",{"_index":526,"title":{},"body":{"injectables/PostsService.html":{}}}],["badrequestexception('you",{"_index":540,"title":{},"body":{"injectables/PostsService.html":{}}}],["badrequestexception(error.message",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(password",{"_index":824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["body.password",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.role",{"_index":675,"title":{},"body":{"injectables/UsersService.html":{}}}],["boolean",{"_index":579,"title":{},"body":{"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":99,"title":{},"body":{"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":806,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":804,"title":{},"body":{"modules.html":{}}}],["building",{"_index":754,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":572,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":575,"title":{},"body":{"guards/RolesGuard.html":{}}}],["carácter",{"_index":354,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{}}}],["catch",{"_index":86,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["categorie",{"_index":467,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["categorie'})@apiresponse({status",{"_index":407,"title":{},"body":{"controllers/PostsController.html":{}}}],["categories",{"_index":288,"title":{},"body":{"interfaces/IPost.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"injectables/PostsService.html":{}}}],["categories.length",{"_index":525,"title":{},"body":{"injectables/PostsService.html":{}}}],["category",{"_index":424,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["category'})@apiresponse({status",{"_index":420,"title":{},"body":{"controllers/PostsController.html":{}}}],["changed",{"_index":647,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["changed'})@apiresponse({status",{"_index":636,"title":{},"body":{"controllers/UsersController.html":{}}}],["class",{"_index":68,"title":{"classes/Login.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":326,"title":{},"body":{"classes/Login.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_adminsmodule",{"_index":102,"title":{},"body":{"modules/AdminsModule.html":{},"overview.html":{}}}],["cluster_adminsmodule_providers",{"_index":103,"title":{},"body":{"modules/AdminsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":495,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":496,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":497,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":651,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":652,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":653,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["common/interfaces/post",{"_index":523,"title":{},"body":{"injectables/PostsService.html":{}}}],["comparepassword",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["comparepassword(password",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["configmodule",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":81,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":125,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["constructor(@injectmodel(post.name",{"_index":524,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":672,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":318,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(jwt",{"_index":687,"title":{},"body":{"injectables/ValidateToken.html":{}}}],["constructor(postmodel",{"_index":506,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":69,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/ValidateToken.html":{}}}],["constructor(reflector",{"_index":573,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(usermodel",{"_index":126,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["contener",{"_index":350,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{}}}],["content",{"_index":289,"title":{},"body":{"interfaces/IPost.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"injectables/PostsService.html":{}}}],["context",{"_index":578,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":585,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":584,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":586,"title":{},"body":{"guards/RolesGuard.html":{}}}],["contraseña",{"_index":348,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{}}}],["controller",{"_index":0,"title":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":66,"title":{},"body":{"controllers/AdminsController.html":{}}}],["controller('auth",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":466,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":642,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":692,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["created",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["createpost",{"_index":394,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(req",{"_index":402,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(undefined",{"_index":508,"title":{},"body":{"injectables/PostsService.html":{}}}],["data",{"_index":82,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["debe",{"_index":349,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{}}}],["declarations",{"_index":98,"title":{},"body":{"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"classes/Login.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["decorators/roles.decorators",{"_index":581,"title":{},"body":{"guards/RolesGuard.html":{}}}],["default",{"_index":437,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":31,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["delete",{"_index":412,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["delete('/:id",{"_index":490,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["delete('/:id')@apioperation({summary",{"_index":411,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleted",{"_index":552,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["deletepost",{"_index":503,"title":{},"body":{"injectables/PostsService.html":{}}}],["deletepost(req",{"_index":510,"title":{},"body":{"injectables/PostsService.html":{}}}],["deleteuser",{"_index":395,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deleteuser(@param('id",{"_index":649,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(id",{"_index":410,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["dependencies",{"_index":96,"title":{"dependencies.html":{}},"body":{"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":23,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"classes/Login.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":767,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":693,"title":{},"body":{"coverage.html":{}}}],["doe",{"_index":344,"title":{},"body":{"classes/Login.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{}}}],["doesn't",{"_index":428,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto.ts",{"_index":328,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{},"coverage.html":{}}}],["dto.ts:16",{"_index":331,"title":{},"body":{"classes/Login.html":{}}}],["dto.ts:21",{"_index":334,"title":{},"body":{"classes/Login.html":{}}}],["dto.ts:27",{"_index":593,"title":{},"body":{"classes/SignUp.html":{}}}],["dto.ts:40",{"_index":598,"title":{},"body":{"classes/SignUp.html":{}}}],["dto/auth",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/post",{"_index":462,"title":{},"body":{"controllers/PostsController.html":{}}}],["dto/update",{"_index":640,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":778,"title":{},"body":{"index.html":{}}}],["edit",{"_index":634,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["efficient",{"_index":755,"title":{},"body":{"index.html":{}}}],["email",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["enum",{"_index":612,"title":{},"body":{"classes/User.html":{}}}],["enumerations",{"_index":743,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":30,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["error'})@delete('/:id",{"_index":623,"title":{},"body":{"controllers/UsersController.html":{}}}],["error'})@get('/posts",{"_index":44,"title":{},"body":{"controllers/AdminsController.html":{}}}],["especial",{"_index":355,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{}}}],["especial.'})@apiproperty({example",{"_index":595,"title":{},"body":{"classes/SignUp.html":{}}}],["example",{"_index":342,"title":{},"body":{"classes/Login.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["example1234",{"_index":333,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{}}}],["example@example.com",{"_index":330,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{}}}],["executioncontext",{"_index":576,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exist",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{}}}],["exists'})@apiresponse({status",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["expiresin",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":67,"title":{},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ExtendedUser.html":{},"interfaces/IPost.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["exports",{"_index":101,"title":{},"body":{"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":51,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["extendeduser",{"_index":278,"title":{"interfaces/ExtendedUser.html":{}},"body":{"interfaces/ExtendedUser.html":{},"coverage.html":{}}}],["extends",{"_index":282,"title":{},"body":{"interfaces/ExtendedUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/SignUp.html":{},"interfaces/UserRequest.html":{}}}],["extractjwt",{"_index":302,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":308,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":310,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ExtendedUser.html":{},"interfaces/IPost.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"coverage.html":{}}}],["filter",{"_index":419,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["filterbycategory",{"_index":396,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["filterbycategory(category",{"_index":417,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["find",{"_index":553,"title":{},"body":{"injectables/PostsService.html":{}}}],["findbyidandupdate(idparam",{"_index":544,"title":{},"body":{"injectables/PostsService.html":{}}}],["findbyidandupdate(paramid",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["founded",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["founded'})@apiresponse({status",{"_index":408,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["framework",{"_index":753,"title":{},"body":{"index.html":{}}}],["function",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":747,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":482,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["get('/:id')@apioperation({summary",{"_index":443,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/filter",{"_index":478,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/filter')@apioperation({summary",{"_index":418,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/posts",{"_index":88,"title":{},"body":{"controllers/AdminsController.html":{}}}],["get('/search",{"_index":475,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/search')@apioperation({summary",{"_index":447,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/user/:userid",{"_index":492,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/user/:userid')@apioperation({summary",{"_index":426,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/users",{"_index":74,"title":{},"body":{"controllers/AdminsController.html":{}}}],["get()@apioperation({summary",{"_index":434,"title":{},"body":{"controllers/PostsController.html":{}}}],["getadmins",{"_index":12,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsService.html":{}}}],["getadmins(@res",{"_index":79,"title":{},"body":{"controllers/AdminsController.html":{}}}],["getadmins(res",{"_index":14,"title":{},"body":{"controllers/AdminsController.html":{}}}],["getadminsposts",{"_index":13,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsService.html":{}}}],["getadminsposts(@res",{"_index":89,"title":{},"body":{"controllers/AdminsController.html":{}}}],["getadminsposts(res",{"_index":40,"title":{},"body":{"controllers/AdminsController.html":{}}}],["getallusers",{"_index":620,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallusers(@req",{"_index":643,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallusers(req",{"_index":625,"title":{},"body":{"controllers/UsersController.html":{}}}],["getpostbyid",{"_index":504,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostbyid(id",{"_index":514,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostbyuser",{"_index":397,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpostbyuser(@param('userid",{"_index":493,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyuser(userid",{"_index":425,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getposts",{"_index":398,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getposts(page",{"_index":431,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getting",{"_index":749,"title":{"index.html":{}},"body":{}}],["getuserbyid",{"_index":399,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyid(@param('id",{"_index":483,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["getuserbyid(id",{"_index":442,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":661,"title":{},"body":{"injectables/UsersService.html":{}}}],["global",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{}}}],["grow",{"_index":785,"title":{},"body":{"index.html":{}}}],["guard",{"_index":569,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":570,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/local",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["hash",{"_index":823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashedpassword",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashpassword(password",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["here",{"_index":78,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["here'})@apiresponse({status",{"_index":26,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpmodule",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["https://nestjs.com",{"_index":800,"title":{},"body":{"index.html":{}}}],["hydrateddocument",{"_index":370,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["id",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"interfaces/UserPayload.html":{},"interfaces/UserRequest.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiresponse({status",{"_index":444,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["identifier",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["idparam",{"_index":511,"title":{},"body":{"injectables/PostsService.html":{}}}],["ignoreexpiration",{"_index":309,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":582,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":46,"title":{},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ExtendedUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["imports",{"_index":117,"title":{},"body":{"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["incorrects",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AdminsController.html":{},"injectables/AdminsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ExtendedUser.html":{},"interfaces/IPost.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserRequest.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ExtendedUser.html":{},"interfaces/IPost.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["inherited",{"_index":590,"title":{},"body":{"classes/SignUp.html":{}}}],["injectable",{"_index":122,"title":{"injectables/AdminsService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}},"body":{"injectables/AdminsService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"coverage.html":{}}}],["injectables",{"_index":123,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"overview.html":{}}}],["injectmodel",{"_index":135,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(post.name",{"_index":139,"title":{},"body":{"injectables/AdminsService.html":{}}}],["injectmodel(user.name",{"_index":137,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/AuthService.html":{}}}],["installation",{"_index":763,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":765,"title":{},"body":{"index.html":{}}}],["interface",{"_index":277,"title":{"interfaces/ExtendedUser.html":{},"interfaces/IPost.html":{},"interfaces/UserPayload.html":{},"interfaces/UserRequest.html":{}},"body":{"interfaces/ExtendedUser.html":{},"interfaces/IPost.html":{},"interfaces/UserPayload.html":{},"interfaces/UserRequest.html":{},"coverage.html":{}}}],["interfaces",{"_index":279,"title":{},"body":{"interfaces/ExtendedUser.html":{},"interfaces/IPost.html":{},"interfaces/UserPayload.html":{},"interfaces/UserRequest.html":{},"overview.html":{}}}],["internal",{"_index":28,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["invalid",{"_index":622,"title":{},"body":{"controllers/UsersController.html":{}}}],["ipost",{"_index":285,"title":{"interfaces/IPost.html":{}},"body":{"interfaces/IPost.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["isarray",{"_index":384,"title":{},"body":{"classes/PostDto.html":{},"classes/PostUpdateDto.html":{}}}],["isemail",{"_index":337,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{}}}],["isemail()@apiproperty({example",{"_index":589,"title":{},"body":{"classes/SignUp.html":{}}}],["isglobal",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["ismatch",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnotempty",{"_index":336,"title":{},"body":{"classes/Login.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"classes/SignUp.html":{}}}],["isnotempty()@isarray()@apiproperty({example",{"_index":378,"title":{},"body":{"classes/PostDto.html":{},"classes/PostUpdateDto.html":{}}}],["isnotempty()@isstring()@apiproperty({example",{"_index":381,"title":{},"body":{"classes/PostDto.html":{},"classes/PostUpdateDto.html":{}}}],["isnotempty()@matches(/[\\w",{"_index":594,"title":{},"body":{"classes/SignUp.html":{}}}],["isoptional",{"_index":339,"title":{},"body":{"classes/Login.html":{},"classes/PostDto.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@apiproperty({example",{"_index":592,"title":{},"body":{"classes/SignUp.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isemail()@apiproperty({example",{"_index":601,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isoptional()@isstring()@apiproperty({example",{"_index":603,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring",{"_index":335,"title":{},"body":{"classes/Login.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty()@apiproperty({example",{"_index":332,"title":{},"body":{"classes/Login.html":{}}}],["isstring()@isnotempty()@isemail()@apiproperty({example",{"_index":329,"title":{},"body":{"classes/Login.html":{}}}],["isstring()@isoptional()@apiproperty({example",{"_index":376,"title":{},"body":{"classes/PostDto.html":{}}}],["john",{"_index":343,"title":{},"body":{"classes/Login.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{}}}],["join",{"_index":792,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ValidateToken.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":56,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AdminsController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":307,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ValidateToken.html":{}}}],["jwtstrategy",{"_index":221,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":797,"title":{},"body":{"index.html":{}}}],["la",{"_index":347,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{}}}],["lean",{"_index":545,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["legend",{"_index":97,"title":{},"body":{"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":803,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":782,"title":{},"body":{"index.html":{}}}],["limit",{"_index":433,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["limit(limitint",{"_index":566,"title":{},"body":{"injectables/PostsService.html":{}}}],["limitint",{"_index":561,"title":{},"body":{"injectables/PostsService.html":{}}}],["list",{"_index":76,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["list'})@apiresponse({status",{"_index":21,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["literal",{"_index":617,"title":{},"body":{"interfaces/UserRequest.html":{}}}],["local",{"_index":322,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":202,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":222,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logged",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":175,"title":{"classes/Login.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Login.html":{},"classes/SignUp.html":{},"coverage.html":{}}}],["login(@req",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["login:31",{"_index":591,"title":{},"body":{"classes/SignUp.html":{}}}],["login:38",{"_index":596,"title":{},"body":{"classes/SignUp.html":{}}}],["match",{"_index":414,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["matches",{"_index":338,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{}}}],["matches(/[\\w",{"_index":346,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{}}}],["matching",{"_index":92,"title":{},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ExtendedUser.html":{},"interfaces/IPost.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["menos",{"_index":352,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{}}}],["message",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Login.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SignUp.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["miscellaneous",{"_index":742,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":781,"title":{},"body":{"index.html":{}}}],["mode",{"_index":771,"title":{},"body":{"index.html":{}}}],["model",{"_index":127,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["models/post.schema",{"_index":500,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["models/user.schema",{"_index":657,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["moderator",{"_index":746,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["module",{"_index":93,"title":{"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":95,"title":{"modules.html":{}},"body":{"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/admins/admins.module",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/posts/posts.module",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoose",{"_index":136,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/AuthService.html":{},"classes/Post.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoose.isvalidobjectid(id",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["mongoose.schema.types.objectid",{"_index":372,"title":{},"body":{"classes/Post.html":{}}}],["mongoosemodule",{"_index":109,"title":{},"body":{"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":118,"title":{},"body":{"modules/AdminsModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot(process.env.db_url",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":794,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":798,"title":{},"body":{"index.html":{}}}],["name",{"_index":34,"title":{},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["nest",{"_index":759,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":802,"title":{},"body":{"index.html":{}}}],["nestjs/axios",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":48,"title":{},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ValidateToken.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":717,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":110,"title":{},"body":{"modules/AdminsModule.html":{},"injectables/AdminsService.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":295,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":64,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"classes/Login.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":145,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["node.js",{"_index":752,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":134,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('no",{"_index":533,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('post",{"_index":535,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('posts",{"_index":567,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('provide",{"_index":558,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('there",{"_index":146,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`this",{"_index":557,"title":{},"body":{"injectables/PostsService.html":{}}}],["npm",{"_index":764,"title":{},"body":{"index.html":{}}}],["number",{"_index":432,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["one",{"_index":406,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["open",{"_index":783,"title":{},"body":{"index.html":{}}}],["optional",{"_index":36,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IPost.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Post.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["options",{"_index":564,"title":{},"body":{"injectables/PostsService.html":{}}}],["out",{"_index":106,"title":{},"body":{"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":807,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":712,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":439,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["pageint",{"_index":559,"title":{},"body":{"injectables/PostsService.html":{}}}],["param",{"_index":457,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":487,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":33,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["parameters'})@apiresponse({status",{"_index":449,"title":{},"body":{"controllers/PostsController.html":{}}}],["paramid",{"_index":669,"title":{},"body":{"injectables/UsersService.html":{}}}],["parseint(limit",{"_index":562,"title":{},"body":{"injectables/PostsService.html":{}}}],["parseint(page",{"_index":560,"title":{},"body":{"injectables/PostsService.html":{}}}],["parseintpipe",{"_index":458,"title":{},"body":{"controllers/PostsController.html":{}}}],["passport",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":305,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":297,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["password').lean",{"_index":142,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/UsersService.html":{}}}],["passwords",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwords.ts",{"_index":709,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["path",{"_index":555,"title":{},"body":{"injectables/PostsService.html":{}}}],["payload",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":312,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.name",{"_index":313,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.role",{"_index":314,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["please",{"_index":421,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["populate",{"_index":554,"title":{},"body":{"injectables/PostsService.html":{}}}],["post",{"_index":114,"title":{"classes/Post.html":{}},"body":{"modules/AdminsModule.html":{},"injectables/AdminsService.html":{},"controllers/AuthController.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["post'})@apiresponse({status",{"_index":404,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('/login",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup')@apioperation({summary",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({summary",{"_index":403,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.name",{"_index":121,"title":{},"body":{"modules/AdminsModule.html":{},"modules/PostsModule.html":{}}}],["postcreated",{"_index":527,"title":{},"body":{"injectables/PostsService.html":{}}}],["postcreated._id",{"_index":529,"title":{},"body":{"injectables/PostsService.html":{}}}],["postdeleted",{"_index":550,"title":{},"body":{"injectables/PostsService.html":{}}}],["postdocument",{"_index":371,"title":{},"body":{"classes/Post.html":{},"miscellaneous/typealiases.html":{}}}],["postdto",{"_index":374,"title":{"classes/PostDto.html":{}},"body":{"classes/PostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["postmodel",{"_index":128,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/PostsService.html":{}}}],["posts",{"_index":42,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts'})@apiresponse({status",{"_index":435,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.'})@apiresponse({status",{"_index":429,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":499,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.length",{"_index":532,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts.service",{"_index":461,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/models/post.schema",{"_index":116,"title":{},"body":{"modules/AdminsModule.html":{},"injectables/AdminsService.html":{}}}],["postsbyadmins",{"_index":147,"title":{},"body":{"injectables/AdminsService.html":{}}}],["postschema",{"_index":115,"title":{},"body":{"modules/AdminsModule.html":{},"classes/Post.html":{},"modules/PostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postscontroller",{"_index":392,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":153,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":460,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["posttodelete",{"_index":548,"title":{},"body":{"injectables/PostsService.html":{}}}],["posttodelete.userid.tostring",{"_index":549,"title":{},"body":{"injectables/PostsService.html":{}}}],["posttoupdate",{"_index":537,"title":{},"body":{"injectables/PostsService.html":{}}}],["posttoupdate.userid.tostring",{"_index":539,"title":{},"body":{"injectables/PostsService.html":{}}}],["postupdatedto",{"_index":385,"title":{"classes/PostUpdateDto.html":{}},"body":{"classes/PostUpdateDto.html":{},"coverage.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":138,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["process.env.jwt_secret_key",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/ValidateToken.html":{}}}],["production",{"_index":773,"title":{},"body":{"index.html":{}}}],["profile",{"_index":646,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["profile'})@apiresponse({status",{"_index":635,"title":{},"body":{"controllers/UsersController.html":{}}}],["progressive",{"_index":751,"title":{},"body":{"index.html":{}}}],["project",{"_index":784,"title":{},"body":{"index.html":{}}}],["promise",{"_index":132,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["prop",{"_index":368,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["prop({type",{"_index":359,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["properties",{"_index":283,"title":{"properties.html":{}},"body":{"interfaces/ExtendedUser.html":{},"interfaces/IPost.html":{},"classes/Login.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserRequest.html":{},"properties.html":{}}}],["provide",{"_index":422,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["provided",{"_index":486,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["provided'})@apiresponse({status",{"_index":415,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["providers",{"_index":100,"title":{},"body":{"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["put",{"_index":459,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["put('/:id",{"_index":485,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["put('/:id')@apioperation({summary",{"_index":454,"title":{},"body":{"controllers/PostsController.html":{}}}],["query",{"_index":452,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["query('author",{"_index":480,"title":{},"body":{"controllers/PostsController.html":{}}}],["query('category",{"_index":479,"title":{},"body":{"controllers/PostsController.html":{}}}],["query('limit",{"_index":473,"title":{},"body":{"controllers/PostsController.html":{}}}],["query('page",{"_index":472,"title":{},"body":{"controllers/PostsController.html":{}}}],["query('query",{"_index":476,"title":{},"body":{"controllers/PostsController.html":{}}}],["read",{"_index":793,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":70,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{}}}],["ref",{"_index":366,"title":{},"body":{"classes/Post.html":{}}}],["reflect",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{}}}],["regex",{"_index":563,"title":{},"body":{"injectables/PostsService.html":{}}}],["removeuser",{"_index":662,"title":{},"body":{"injectables/UsersService.html":{}}}],["removeuser(id",{"_index":666,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":762,"title":{},"body":{"index.html":{}}}],["req",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["req.user",{"_index":536,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["req.user.id",{"_index":468,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["req.user.name",{"_index":469,"title":{},"body":{"controllers/PostsController.html":{}}}],["request",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"interfaces/UserRequest.html":{},"controllers/UsersController.html":{}}}],["request.ts",{"_index":616,"title":{},"body":{"interfaces/UserRequest.html":{},"coverage.html":{}}}],["required",{"_index":360,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["res",{"_index":37,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["res.json(data",{"_index":471,"title":{},"body":{"controllers/PostsController.html":{}}}],["res.status(200).json",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["res.status(200).json(data",{"_index":85,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["res.status(200).json(result",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(201).json",{"_index":489,"title":{},"body":{"controllers/PostsController.html":{}}}],["reset",{"_index":105,"title":{},"body":{"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":15,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["result",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":91,"title":{},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ExtendedUser.html":{},"interfaces/IPost.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":20,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":38,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{}}}],["role",{"_index":54,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserRequest.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role.user",{"_index":465,"title":{},"body":{"controllers/PostsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["role.user)@useguards(jwtauthguard",{"_index":628,"title":{},"body":{"controllers/UsersController.html":{}}}],["role_key",{"_index":580,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles",{"_index":52,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(role.admin",{"_index":72,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["roles(role.admin)@useguards(jwtauthguard",{"_index":18,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/UsersController.html":{}}}],["roles.some((role",{"_index":587,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesguard",{"_index":59,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AdminsController.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["rolesguard)@apioperation({summary",{"_index":41,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/UsersController.html":{}}}],["rolesguard)@get('/:id')@apioperation({summary",{"_index":629,"title":{},"body":{"controllers/UsersController.html":{}}}],["rolesguard)@get('/users')@apioperation({summary",{"_index":19,"title":{},"body":{"controllers/AdminsController.html":{}}}],["rolesguard)@get()@apioperation({summary",{"_index":626,"title":{},"body":{"controllers/UsersController.html":{}}}],["rolesguard)@put('/:id')@apioperation({summary",{"_index":633,"title":{},"body":{"controllers/UsersController.html":{}}}],["run",{"_index":768,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":756,"title":{},"body":{"index.html":{}}}],["schema",{"_index":120,"title":{},"body":{"modules/AdminsModule.html":{},"modules/AuthModule.html":{},"classes/Post.html":{},"modules/PostsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":369,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(post",{"_index":373,"title":{},"body":{"classes/Post.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":615,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["search",{"_index":448,"title":{},"body":{"controllers/PostsController.html":{}}}],["searchpost",{"_index":400,"title":{},"body":{"controllers/PostsController.html":{}}}],["searchpost(query",{"_index":446,"title":{},"body":{"controllers/PostsController.html":{}}}],["searchposts",{"_index":505,"title":{},"body":{"injectables/PostsService.html":{}}}],["searchposts(query",{"_index":518,"title":{},"body":{"injectables/PostsService.html":{}}}],["secret",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ValidateToken.html":{}}}],["secretorkey",{"_index":311,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":556,"title":{},"body":{"injectables/PostsService.html":{}}}],["server",{"_index":29,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["setmetadata(role_key",{"_index":825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":757,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":176,"title":{"classes/SignUp.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Login.html":{},"classes/SignUp.html":{},"coverage.html":{}}}],["signup(@body",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(body",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["skip",{"_index":530,"title":{},"body":{"injectables/PostsService.html":{}}}],["skip((pageint",{"_index":565,"title":{},"body":{"injectables/PostsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AdminsController.html":{},"modules/AdminsModule.html":{},"injectables/AdminsService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ExtendedUser.html":{},"interfaces/IPost.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"index.html":{}}}],["specific",{"_index":427,"title":{},"body":{"controllers/PostsController.html":{}}}],["sponsors",{"_index":787,"title":{},"body":{"index.html":{}}}],["src/.../bcrypt",{"_index":820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":748,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post.schema.ts",{"_index":817,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":744,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorators.ts",{"_index":821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":818,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/enums/role.enum",{"_index":55,"title":{},"body":{"controllers/AdminsController.html":{},"classes/Login.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["src/common/enums/role.enum.ts",{"_index":745,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/interfaces/extended",{"_index":280,"title":{},"body":{"interfaces/ExtendedUser.html":{},"coverage.html":{}}}],["src/common/interfaces/payload",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/UserPayload.html":{},"coverage.html":{}}}],["src/common/interfaces/post",{"_index":463,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/common/interfaces/post.ts",{"_index":286,"title":{},"body":{"interfaces/IPost.html":{},"coverage.html":{}}}],["src/common/interfaces/user",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"interfaces/UserRequest.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/common/interfaces/user.ts",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["src/main.ts",{"_index":700,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/admins/admins.controller.ts",{"_index":6,"title":{},"body":{"controllers/AdminsController.html":{},"coverage.html":{}}}],["src/modules/admins/admins.controller.ts:21",{"_index":32,"title":{},"body":{"controllers/AdminsController.html":{}}}],["src/modules/admins/admins.controller.ts:37",{"_index":45,"title":{},"body":{"controllers/AdminsController.html":{}}}],["src/modules/admins/admins.module.ts",{"_index":107,"title":{},"body":{"modules/AdminsModule.html":{}}}],["src/modules/admins/admins.service.ts",{"_index":124,"title":{},"body":{"injectables/AdminsService.html":{},"coverage.html":{}}}],["src/modules/admins/admins.service.ts:14",{"_index":131,"title":{},"body":{"injectables/AdminsService.html":{}}}],["src/modules/admins/admins.service.ts:22",{"_index":133,"title":{},"body":{"injectables/AdminsService.html":{}}}],["src/modules/admins/admins.service.ts:8",{"_index":129,"title":{},"body":{"injectables/AdminsService.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:22",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:39",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:15",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:21",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:33",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:49",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/decorators/roles.decorators.ts",{"_index":704,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/dto/auth",{"_index":327,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt",{"_index":291,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/local",{"_index":315,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/roles.guard.ts",{"_index":571,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/roles.guard.ts:7",{"_index":574,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/modules/auth/guards/roles.guard.ts:9",{"_index":577,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/modules/auth/jwt/jwt.validate.ts",{"_index":686,"title":{},"body":{"injectables/ValidateToken.html":{},"coverage.html":{}}}],["src/modules/auth/jwt/jwt.validate.ts:5",{"_index":688,"title":{},"body":{"injectables/ValidateToken.html":{}}}],["src/modules/auth/jwt/jwt.validate.ts:8",{"_index":690,"title":{},"body":{"injectables/ValidateToken.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts",{"_index":296,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:14",{"_index":301,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:6",{"_index":299,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts",{"_index":317,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:12",{"_index":321,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/strategies/local.strategy.ts:7",{"_index":319,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/posts/dto/post",{"_index":386,"title":{},"body":{"classes/PostUpdateDto.html":{},"coverage.html":{}}}],["src/modules/posts/dto/post.ts",{"_index":375,"title":{},"body":{"classes/PostDto.html":{},"coverage.html":{}}}],["src/modules/posts/dto/post.ts:12",{"_index":377,"title":{},"body":{"classes/PostDto.html":{}}}],["src/modules/posts/dto/post.ts:17",{"_index":382,"title":{},"body":{"classes/PostDto.html":{}}}],["src/modules/posts/dto/post.ts:22",{"_index":380,"title":{},"body":{"classes/PostDto.html":{}}}],["src/modules/posts/dto/post.ts:7",{"_index":383,"title":{},"body":{"classes/PostDto.html":{}}}],["src/modules/posts/models/post.schema.ts",{"_index":356,"title":{},"body":{"classes/Post.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/posts/models/post.schema.ts:10",{"_index":365,"title":{},"body":{"classes/Post.html":{}}}],["src/modules/posts/models/post.schema.ts:12",{"_index":361,"title":{},"body":{"classes/Post.html":{}}}],["src/modules/posts/models/post.schema.ts:14",{"_index":364,"title":{},"body":{"classes/Post.html":{}}}],["src/modules/posts/models/post.schema.ts:16",{"_index":363,"title":{},"body":{"classes/Post.html":{}}}],["src/modules/posts/models/post.schema.ts:18",{"_index":367,"title":{},"body":{"classes/Post.html":{}}}],["src/modules/posts/posts.controller.ts",{"_index":393,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/modules/posts/posts.controller.ts:105",{"_index":451,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/modules/posts/posts.controller.ts:134",{"_index":423,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/modules/posts/posts.controller.ts:158",{"_index":445,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/modules/posts/posts.controller.ts:182",{"_index":456,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/modules/posts/posts.controller.ts:211",{"_index":416,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/modules/posts/posts.controller.ts:235",{"_index":430,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/modules/posts/posts.controller.ts:47",{"_index":409,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/modules/posts/posts.controller.ts:81",{"_index":436,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/modules/posts/posts.module.ts",{"_index":498,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/modules/posts/posts.service.ts",{"_index":502,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/modules/posts/posts.service.ts:113",{"_index":513,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/modules/posts/posts.service.ts:12",{"_index":507,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/modules/posts/posts.service.ts:14",{"_index":509,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/modules/posts/posts.service.ts:32",{"_index":517,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/modules/posts/posts.service.ts:41",{"_index":515,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/modules/posts/posts.service.ts:49",{"_index":521,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/modules/posts/posts.service.ts:64",{"_index":512,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/modules/posts/posts.service.ts:77",{"_index":516,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/modules/posts/posts.service.ts:91",{"_index":519,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/modules/users/dto/update",{"_index":600,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/models/user.schema",{"_index":113,"title":{},"body":{"modules/AdminsModule.html":{},"injectables/AdminsService.html":{},"classes/Post.html":{}}}],["src/modules/users/models/user.schema.ts",{"_index":607,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/models/user.schema.ts:10",{"_index":610,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/models/user.schema.ts:13",{"_index":609,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/models/user.schema.ts:16",{"_index":611,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/models/user.schema.ts:19",{"_index":613,"title":{},"body":{"classes/User.html":{}}}],["src/modules/users/users.controller.ts",{"_index":619,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:108",{"_index":624,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:34",{"_index":627,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:54",{"_index":631,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:78",{"_index":637,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/users/users.module.ts",{"_index":655,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.service.ts",{"_index":660,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:13",{"_index":663,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:16",{"_index":665,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:24",{"_index":664,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:32",{"_index":670,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.service.ts:51",{"_index":667,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/bcrypt",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":769,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":772,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":774,"title":{},"body":{"index.html":{}}}],["started",{"_index":750,"title":{"index.html":{}},"body":{}}],["starter",{"_index":761,"title":{},"body":{"index.html":{}}}],["statements",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":77,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":795,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":303,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ExtendedUser.html":{},"interfaces/IPost.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserRequest.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"miscellaneous/variables.html":{}}}],["successfully",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["summary",{"_index":75,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":306,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":788,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":805,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["tech",{"_index":379,"title":{},"body":{"classes/PostDto.html":{},"classes/PostUpdateDto.html":{}}}],["test",{"_index":777,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":780,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":779,"title":{},"body":{"index.html":{}}}],["tests",{"_index":776,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":786,"title":{},"body":{"index.html":{}}}],["this.adminservice.getadmins",{"_index":84,"title":{},"body":{"controllers/AdminsController.html":{}}}],["this.adminservice.getadminsposts",{"_index":90,"title":{},"body":{"controllers/AdminsController.html":{}}}],["this.authservice.login(req.user",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(body",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":324,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.getpostbyid(idparam",{"_index":538,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.jwt.sign(payload",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwt.verify(token",{"_index":691,"title":{},"body":{"injectables/ValidateToken.html":{}}}],["this.postmodel",{"_index":543,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.create",{"_index":528,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.find().lean",{"_index":148,"title":{},"body":{"injectables/AdminsService.html":{}}}],["this.postmodel.find().skip(skip).limit(limit).lean",{"_index":531,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.find(query",{"_index":568,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.findbyid(id).lean",{"_index":534,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postmodel.findbyidanddelete(idparam",{"_index":551,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost",{"_index":470,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(req",{"_index":491,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.filterbycategory(category",{"_index":481,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostbyid(id",{"_index":484,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostbyuser(userid",{"_index":494,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getposts(page",{"_index":474,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.searchposts(query",{"_index":477,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(req",{"_index":488,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.reflector.getallandoverride(role_key",{"_index":583,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.usermodel",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.create",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel.find().select",{"_index":141,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(id).select",{"_index":673,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidanddelete(id",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuserbyid(id",{"_index":645,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getusers",{"_index":644,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.removeuser(id",{"_index":650,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateuser(id",{"_index":648,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":87,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["title",{"_index":290,"title":{},"body":{"interfaces/IPost.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["title'})@apiresponse({status",{"_index":450,"title":{},"body":{"controllers/PostsController.html":{}}}],["token",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ValidateToken.html":{}}}],["token'})@apiresponse({status",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokenid",{"_index":671,"title":{},"body":{"injectables/UsersService.html":{}}}],["touch",{"_index":796,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/Post.html":{},"classes/User.html":{}}}],["try",{"_index":80,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":801,"title":{},"body":{"index.html":{}}}],["type",{"_index":35,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AdminsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ExtendedUser.html":{},"interfaces/IPost.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserPayload.html":{},"interfaces/UserRequest.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateToken.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":815,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":760,"title":{},"body":{"index.html":{}}}],["ui",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["un",{"_index":353,"title":{},"body":{"classes/Login.html":{},"classes/SignUp.html":{}}}],["unauthorizedexception",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["unauthorizedexception('email",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('role",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{}}}],["unauthorizedexception('you",{"_index":674,"title":{},"body":{"injectables/UsersService.html":{}}}],["undefined",{"_index":362,"title":{},"body":{"classes/Post.html":{},"classes/User.html":{}}}],["unique",{"_index":608,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":775,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":39,"title":{},"body":{"controllers/AdminsController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":814,"title":{},"body":{"properties.html":{}}}],["upd",{"_index":541,"title":{},"body":{"injectables/PostsService.html":{}}}],["update",{"_index":455,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["update.ts",{"_index":387,"title":{},"body":{"classes/PostUpdateDto.html":{},"coverage.html":{}}}],["update.ts:13",{"_index":388,"title":{},"body":{"classes/PostUpdateDto.html":{}}}],["update.ts:18",{"_index":390,"title":{},"body":{"classes/PostUpdateDto.html":{}}}],["update.ts:23",{"_index":389,"title":{},"body":{"classes/PostUpdateDto.html":{}}}],["update.ts:8",{"_index":391,"title":{},"body":{"classes/PostUpdateDto.html":{}}}],["updated",{"_index":546,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["updatedpost",{"_index":542,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatedpost._id",{"_index":547,"title":{},"body":{"injectables/PostsService.html":{}}}],["updateduser",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatepost",{"_index":401,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(id",{"_index":453,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(req",{"_index":520,"title":{},"body":{"injectables/PostsService.html":{}}}],["updateuser",{"_index":621,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuser(id",{"_index":632,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(tokenid",{"_index":668,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":599,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto})@apiresponse({status",{"_index":630,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards",{"_index":47,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":73,"title":{},"body":{"controllers/AdminsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["useguards(localauthguard",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('/login')@apioperation({summary",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":111,"title":{"classes/User.html":{}},"body":{"modules/AdminsModule.html":{},"injectables/AdminsService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/ExtendedUser.html":{},"injectables/LocalStrategy.html":{},"classes/Login.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"interfaces/UserRequest.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user'})@apiresponse({status",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["user._id",{"_index":325,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["user.id",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.name",{"_index":119,"title":{},"body":{"modules/AdminsModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{}}}],["user.role",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["user.role?.includes(role",{"_index":588,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.ts",{"_index":281,"title":{},"body":{"interfaces/ExtendedUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserPayload.html":{},"coverage.html":{}}}],["user.ts:14",{"_index":602,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.ts:18",{"_index":606,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.ts:22",{"_index":605,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.ts:9",{"_index":604,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["userdeleted",{"_index":683,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdocument",{"_index":614,"title":{},"body":{"classes/User.html":{},"miscellaneous/typealiases.html":{}}}],["userfound",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["userfounded",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["userfounded.password",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":358,"title":{},"body":{"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["usermodel",{"_index":130,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":345,"title":{},"body":{"classes/Login.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{}}}],["usernamefield",{"_index":323,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userpayload",{"_index":243,"title":{"interfaces/UserPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/UserPayload.html":{},"coverage.html":{}}}],["userrequest",{"_index":178,"title":{"interfaces/UserRequest.html":{}},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"interfaces/UserRequest.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["users",{"_index":140,"title":{},"body":{"injectables/AdminsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":656,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.length",{"_index":143,"title":{},"body":{"injectables/AdminsService.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":639,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/models/user.schema",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["users/users.module",{"_index":501,"title":{},"body":{"modules/PostsModule.html":{}}}],["userschema",{"_index":112,"title":{},"body":{"modules/AdminsModule.html":{},"modules/AuthModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":618,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":154,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":638,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":298,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":320,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":300,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatetoken",{"_index":654,"title":{"injectables/ValidateToken.html":{}},"body":{"modules/UsersModule.html":{},"injectables/ValidateToken.html":{},"coverage.html":{},"overview.html":{}}}],["validatetoken(token",{"_index":689,"title":{},"body":{"injectables/ValidateToken.html":{}}}],["validateuser",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":340,"title":{},"body":{"classes/Login.html":{},"classes/PostDto.html":{},"classes/PostUpdateDto.html":{},"classes/SignUp.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":438,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":819,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":812,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":770,"title":{},"body":{"index.html":{}}}],["website",{"_index":799,"title":{},"body":{"index.html":{}}}],["wich",{"_index":413,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["you'd",{"_index":791,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":104,"title":{},"body":{"modules/AdminsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AdminsController.html":{"url":"controllers/AdminsController.html","title":"controller - AdminsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/admins/admins.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAdmins\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAdminsPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getAdmins\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAdmins(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.ADMIN)@UseGuards(JwtAuthGuard, RolesGuard)@Get('/users')@ApiOperation({summary: 'Return admin list'})@ApiResponse({status: 200, description: 'Return admin list'})@ApiResponse({status: 404, description: 'There are no admins here'})@ApiResponse({status: 500, description: 'Internal Server Error'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/admins/admins.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getAdminsPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAdminsPosts(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.ADMIN)@UseGuards(JwtAuthGuard, RolesGuard)@ApiOperation({summary: 'Return posts by admins list'})@ApiResponse({status: 200, description: 'Return posts by admins'})@ApiResponse({status: 404, description: 'There are no admins posts here'})@ApiResponse({status: 500, description: 'Internal Server Error'})@Get('/posts')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/admins/admins.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res, UseGuards } from '@nestjs/common';\nimport { AdminsService } from './admins.service';\nimport { Response } from 'express';\nimport { Roles } from '../auth/decorators/roles.decorators';\nimport { Role } from 'src/common/enums/role.enum';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { ApiTags, ApiResponse, ApiOperation } from '@nestjs/swagger';\n\n@ApiTags('admin')\n@Controller('admin')\nexport class AdminsController {\n  constructor(private readonly adminService: AdminsService) {}\n  @Roles(Role.ADMIN)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get('/users')\n  @ApiOperation({ summary: 'Return admin list' })\n  @ApiResponse({ status: 200, description: 'Return admin list' })\n  @ApiResponse({ status: 404, description: 'There are no admins here' })\n  @ApiResponse({ status: 500, description: 'Internal Server Error' })\n  async getAdmins(@Res() res: Response) {\n    try {\n      const data = await this.adminService.getAdmins();\n      return res.status(200).json(data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Roles(Role.ADMIN)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @ApiOperation({ summary: 'Return posts by admins list' })\n  @ApiResponse({ status: 200, description: 'Return posts by admins' })\n  @ApiResponse({ status: 404, description: 'There are no admins posts here' })\n  @ApiResponse({ status: 500, description: 'Internal Server Error' })\n  @Get('/posts')\n  async getAdminsPosts(@Res() res: Response) {\n    try {\n      const data = await this.adminService.getAdminsPosts();\n      return res.status(200).json(data);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminsModule.html":{"url":"modules/AdminsModule.html","title":"module - AdminsModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminsModule\n\n\n\ncluster_AdminsModule_providers\n\n\n\n\nAdminsService\n\nAdminsService\n\n\n\nAdminsModule\n\nAdminsModule\n\nAdminsModule -->\n\nAdminsService->AdminsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/admins/admins.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AdminsService } from './admins.service';\nimport { AdminsController } from './admins.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from 'src/modules/users/models/user.schema';\nimport { Post, PostSchema } from '../posts/models/post.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    MongooseModule.forFeature([{ name: Post.name, schema: PostSchema }]),\n  ],\n  providers: [AdminsService],\n  controllers: [AdminsController],\n})\nexport class AdminsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminsService.html":{"url":"injectables/AdminsService.html","title":"injectable - AdminsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/admins/admins.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAdmins\n                            \n                            \n                                    Async\n                                getAdminsPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, postModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/admins/admins.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAdmins\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAdmins()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/admins/admins.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAdminsPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAdminsPosts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/admins/admins.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User } from 'src/modules/users/models/user.schema';\nimport { Post } from '../posts/models/post.schema';\n\n@Injectable()\nexport class AdminsService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model,\n    @InjectModel(Post.name) private postModel: Model,\n  ) {}\n\n  async getAdmins(): Promise {\n    const users = await this.userModel.find().select('-password').lean();\n    if (!users || users.length === 0) {\n      throw new NotFoundException('There are no admins here');\n    }\n    return users;\n  }\n\n  async getAdminsPosts(): Promise {\n    const postsByAdmins = await this.postModel.find().lean();\n    if (!postsByAdmins) {\n      throw new NotFoundException('There are no admins posts here');\n    }\n    return postsByAdmins;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAdminsModule\n\nAdminsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AdminsModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { HttpModule } from '@nestjs/axios';\nimport { AuthModule } from 'src/modules/auth/auth.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersModule } from 'src/modules/users/users.module';\nimport { PostsModule } from './modules/posts/posts.module';\nimport { AdminsModule } from './modules/admins/admins.module';\n\n@Module({\n  imports: [\n    HttpModule,\n    ConfigModule.forRoot({\n      envFilePath: '.env',\n      isGlobal: true,\n    }),\n    MongooseModule.forRoot(process.env.DB_URL),\n    AuthModule,\n    UsersModule,\n    PostsModule,\n    AdminsModule,\n  ],\n  controllers: [],\n  providers: [Reflector],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                Login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                Signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        Login\n                        \n                    \n                \n            \n            \n                \n                        \n                    Login(req: UserRequest, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('/login')@ApiOperation({summary: 'Assign a token an user'})@ApiResponse({status: 200, description: 'Return a successfully message and user token'})@ApiResponse({status: 500, description: 'Internal Server Error'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            UserRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        Signup\n                        \n                    \n                \n            \n            \n                \n                        \n                    Signup(body: SignUp, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')@ApiOperation({summary: 'Create an user'})@ApiResponse({status: 201, description: 'Return a successfully message and Create an user'})@ApiResponse({status: 401, description: 'Email already exists'})@ApiResponse({status: 500, description: 'Internal Server Error'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/auth/auth.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            SignUp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Res, UseGuards, Req } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { Response } from 'express';\nimport { SignUp } from './dto/auth-dto';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { UserRequest } from 'src/common/interfaces/user-request';\nimport { ApiTags, ApiResponse, ApiOperation } from '@nestjs/swagger';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('/signup')\n  @ApiOperation({ summary: 'Create an user' })\n  @ApiResponse({\n    status: 201,\n    description: 'Return a successfully message and Create an user',\n  })\n  @ApiResponse({ status: 401, description: 'Email already exists' })\n  @ApiResponse({ status: 500, description: 'Internal Server Error' })\n  async Signup(@Body() body: SignUp, @Res() res: Response) {\n    try {\n      await this.authService.SignUp(body);\n      res.status(200).json({ message: 'SignUp successfully' });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @UseGuards(LocalAuthGuard)\n  @Post('/login')\n  @ApiOperation({ summary: 'Assign a token an user' })\n  @ApiResponse({\n    status: 200,\n    description: 'Return a successfully message and user token',\n  })\n  @ApiResponse({ status: 500, description: 'Internal Server Error' })\n  async Login(@Req() req: UserRequest, @Res() res: Response) {\n    try {\n      const result = await this.authService.Login(req.user);\n      res.status(200).json(result);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from '../users/models/user.schema';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    JwtModule.register({\n      global: true,\n      secret: process.env.JWT_SECRET_KEY,\n      signOptions: { expiresIn: '60d' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                Login\n                            \n                            \n                                    Async\n                                SignUp\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, jwt: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        Login\n                        \n                    \n                \n            \n            \n                \n                        \n                    Login(user: UserPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        SignUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    SignUp(body: SignUp)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            SignUp\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from '../users/models/user.schema';\nimport { Model } from 'mongoose';\nimport { SignUp } from './dto/auth-dto';\nimport { comparePassword, hashPassword } from 'src/utils/bcrypt-passwords';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserPayload } from 'src/common/interfaces/payload-user';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectModel(User.name) private userModel: Model,\n    private jwt: JwtService,\n  ) {}\n\n  async validateUser(email: string, password: string) {\n    const userFounded = await this.userModel.findOne({ email });\n    if (!userFounded) {\n      throw new NotFoundException('User not founded');\n    }\n    const isMatch = await comparePassword(password, userFounded.password);\n    if (!isMatch) {\n      throw new UnauthorizedException('Email or Password incorrects');\n    }\n    return userFounded;\n  }\n\n  async SignUp(body: SignUp) {\n    const { email, password, name, role } = body;\n    const hashedPassword = await hashPassword(password);\n    const userFound = await this.userModel.findOne({ email });\n    if (userFound) {\n      throw new UnauthorizedException('Email already exist');\n    }\n    await this.userModel.create({\n      name,\n      email,\n      password: hashedPassword,\n      role,\n    });\n    return { message: 'User created successfully' };\n  }\n\n  async Login(user: UserPayload) {\n    const payload = {\n      id: user.id,\n      name: user.name,\n      role: user.role,\n    };\n    const token = this.jwt.sign(payload, {\n      secret: process.env.JWT_SECRET_KEY,\n    });\n    return { message: `Logged successfully, ${user.name}`, token };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExtendedUser.html":{"url":"interfaces/ExtendedUser.html","title":"interface - ExtendedUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExtendedUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/extended-user.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            User\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            _id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User } from './user';\n\nexport interface ExtendedUser extends User {\n  _id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPost.html":{"url":"interfaces/IPost.html","title":"interface - IPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/post.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            authors\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            categories\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            content\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        categories\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        categories:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IPost {\n  title?: string;\n  authors?: string[];\n  content?: string;\n  categories?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt.strategy.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/jwt.strategy.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET_KEY,\n    });\n  }\n  async validate(payload: any) {\n    return {\n      id: payload.id,\n      name: payload.name,\n      role: payload.role,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/strategies/local.strategy.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return {\n      id: user._id,\n      name: user.name,\n      role: user.role,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Login.html":{"url":"classes/Login.html","title":"class - Login","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Login\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/auth-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@ApiProperty({example: 'example@example.com', description: 'email'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth-dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty({example: 'Example1234.', description: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth-dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNotEmpty,\n  IsEmail,\n  Matches,\n  IsOptional,\n} from 'class-validator';\nimport { Role } from 'src/common/enums/role.enum';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class Login {\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({ example: 'example@example.com', description: 'email' })\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ example: 'Example1234.', description: 'password' })\n  password: string;\n}\n\nexport class SignUp extends Login {\n  @IsOptional()\n  @ApiProperty({ example: 'John Doe', description: 'username' })\n  name?: string;\n\n  @IsEmail()\n  @ApiProperty({ example: 'example@example.com', description: 'email' })\n  email: string;\n\n  @IsNotEmpty()\n  @Matches(/[\\W]/, {\n    message: 'La contraseña debe contener al menos un carácter especial.',\n  })\n  @ApiProperty({ example: 'Example1234.', description: 'password' })\n  password: string;\n  @ApiProperty({ example: 'user, admin', description: 'role' })\n  role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post.html":{"url":"classes/Post.html","title":"class - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/posts/models/post.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                author\n                            \n                            \n                                    \n                                categories\n                            \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/posts/models/post.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/posts/models/post.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/posts/models/post.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/posts/models/post.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/posts/models/post.schema.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport mongoose, { HydratedDocument } from 'mongoose';\nimport { User } from 'src/modules/users/models/user.schema';\n\nexport type PostDocument = HydratedDocument;\n\n@Schema()\nexport class Post {\n  @Prop({ type: String, required: true })\n  title: string;\n  @Prop({ type: String, required: true })\n  author?: string;\n  @Prop({ type: String, required: true })\n  content: string;\n  @Prop({ type: [String], required: true })\n  categories: string[];\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true })\n  userId: User;\n}\n\nexport const PostSchema = SchemaFactory.createForClass(Post);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostDto.html":{"url":"classes/PostDto.html","title":"class - PostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/posts/dto/post.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                author\n                            \n                            \n                                    \n                                    \n                                    \n                                categories\n                            \n                            \n                                    \n                                    \n                                    \n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({example: 'John Doe', description: 'authors'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/posts/dto/post.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsArray()@ApiProperty({example: 'tech', description: 'username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/posts/dto/post.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({example: 'This a tech content', description: 'content'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/posts/dto/post.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({example: 'this is a title', description: 'title'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/posts/dto/post.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsArray, IsNotEmpty, IsOptional } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nexport class PostDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'this is a title', description: 'title' })\n  title: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({ example: 'John Doe', description: 'authors' })\n  author: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'This a tech content', description: 'content' })\n  content: string;\n\n  @IsNotEmpty()\n  @IsArray()\n  @ApiProperty({ example: 'tech', description: 'username' })\n  categories: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostUpdateDto.html":{"url":"classes/PostUpdateDto.html","title":"class - PostUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/posts/dto/post-update.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                authors\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                categories\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        authors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsArray()@ApiProperty({example: 'John Doe', description: 'authors'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/posts/dto/post-update.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsArray()@ApiProperty({example: 'tech', description: 'username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/posts/dto/post-update.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({example: 'This a tech content', description: 'content'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/posts/dto/post-update.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({example: 'this is a title', description: 'title'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/posts/dto/post-update.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsArray, IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class PostUpdateDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'this is a title', description: 'title' })\n  title?: string;\n\n  @IsNotEmpty()\n  @IsArray()\n  @ApiProperty({ example: 'John Doe', description: 'authors' })\n  authors?: string[];\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'This a tech content', description: 'content' })\n  content?: string;\n\n  @IsNotEmpty()\n  @IsArray()\n  @ApiProperty({ example: 'tech', description: 'username' })\n  categories?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                filterByCategory\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getPostByUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getUserById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                searchPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(req: UserRequest, body: PostDto, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a post'})@ApiResponse({status: 201, description: 'Return a successfully message and create a post'})@ApiResponse({status: 400, description: 'Post should be at least one categorie'})@ApiResponse({status: 400, description: 'Post not founded'})@ApiResponse({status: 500, description: 'Internal Server Error'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/posts/posts.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            UserRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: string, res: Response, req: UserRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@ApiOperation({summary: 'Delete post wich match with the ID provided'})@ApiResponse({status: 200, description: 'Delete post wich match with the ID provided'})@ApiResponse({status: 400, description: 'You can only delete your own post'})@ApiResponse({status: 404, description: 'Post not founded'})@ApiResponse({status: 500, description: 'Internal Server Error'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/posts/posts.controller.ts:211\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            UserRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        filterByCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    filterByCategory(category, author, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/filter')@ApiOperation({summary: 'Filter posts by author or category'})@ApiResponse({status: 200, description: 'Filter posts by author or category'})@ApiResponse({status: 400, description: 'To filter, please provide an author or category'})@ApiResponse({status: 404, description: 'Posts not founded'})@ApiResponse({status: 500, description: 'Internal Server Error'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/posts/posts.controller.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                author\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getPostByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostByUser(userId, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:userId')@ApiOperation({summary: 'Returns posts from a specific user'})@ApiResponse({status: 200, description: 'Returns posts from a specific user'})@ApiResponse({status: 404, description: 'This user doesn't have any posts.'})@ApiResponse({status: 500, description: 'Internal Server Error'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/posts/posts.controller.ts:235\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(page: number, limit: number, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Return all posts'})@ApiResponse({status: 200, description: 'Return a posts list'})@ApiResponse({status: 404, description: 'No posts here'})@ApiResponse({status: 404, description: 'Post not founded'})@ApiResponse({status: 500, description: 'Internal Server Error'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/posts/posts.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({summary: 'Returns a post wich match with the ID'})@ApiResponse({status: 200, description: 'Returns a post wich match with the ID'})@ApiResponse({status: 404, description: 'Post not founded'})@ApiResponse({status: 500, description: 'Internal Server Error'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/posts/posts.controller.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        searchPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    searchPost(query: string, page: string, limit: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/search')@ApiOperation({summary: 'Returns the posts that match the search parameters'})@ApiResponse({status: 200, description: 'Returns the posts that match the search parameters'})@ApiResponse({status: 404, description: 'Provide a title'})@ApiResponse({status: 404, description: 'Not posts founded'})@ApiResponse({status: 500, description: 'Internal Server Error'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/posts/posts.controller.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    '1'\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    '10'\n                                            \n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(id: string, req: UserRequest, body: IPost, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id')@ApiOperation({summary: 'Update post wich match with the ID provided'})@ApiResponse({status: 200, description: 'Update post wich match with the ID provided'})@ApiResponse({status: 400, description: 'You can only update your own post'})@ApiResponse({status: 404, description: 'Post not founded'})@ApiResponse({status: 500, description: 'Internal Server Error'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/posts/posts.controller.ts:182\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            UserRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            IPost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n  Query,\n  Req,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { Role } from 'src/common/enums/role.enum';\nimport { Roles } from '../auth/decorators/roles.decorators';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Response } from 'express';\nimport { PostDto } from './dto/post';\nimport { IPost } from 'src/common/interfaces/post';\nimport { UserRequest } from 'src/common/interfaces/user-request';\nimport { ApiResponse, ApiTags, ApiOperation } from '@nestjs/swagger';\n\n@ApiTags('posts')\n@Roles(Role.ADMIN, Role.USER)\n@UseGuards(JwtAuthGuard, RolesGuard)\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n  @Post()\n  @ApiOperation({ summary: 'Create a post' })\n  @ApiResponse({\n    status: 201,\n    description: 'Return a successfully message and create a post',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Post should be at least one categorie',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Post not founded',\n  })\n  @ApiResponse({ status: 500, description: 'Internal Server Error' })\n  async createPost(\n    @Req() req: UserRequest,\n    @Body() body: PostDto,\n    @Res() res: Response,\n  ) {\n    try {\n      const userId = req.user.id;\n      const userName = req.user.name;\n      const data = await this.postsService.createPost({\n        body,\n        userId,\n        userName,\n      });\n      return res.json(data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Return all posts' })\n  @ApiResponse({\n    status: 200,\n    description: 'Return a posts list',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'No posts here',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Post not founded',\n  })\n  @ApiResponse({ status: 500, description: 'Internal Server Error' })\n  async getPosts(\n    @Query('page', new ParseIntPipe()) page: number = 1,\n    @Query('limit', new ParseIntPipe()) limit: number = 10,\n    @Res() res: Response,\n  ) {\n    try {\n      const data = await this.postsService.getPosts(page, limit);\n      return res.status(200).json(data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Get('/search')\n  @ApiOperation({\n    summary: 'Returns the posts that match the search parameters',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Returns the posts that match the search parameters',\n  })\n  @ApiResponse({ status: 404, description: 'Provide a title' })\n  @ApiResponse({ status: 404, description: 'Not posts founded' })\n  @ApiResponse({ status: 500, description: 'Internal Server Error' })\n  async searchPost(\n    @Query('query') query: string,\n    @Query('page') page: string = '1',\n    @Query('limit') limit: string = '10',\n    @Res() res: Response,\n  ) {\n    try {\n      const data = await this.postsService.searchPosts(query, page, limit);\n      return res.status(200).json({ data });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Get('/filter')\n  @ApiOperation({ summary: 'Filter posts by author or category' })\n  @ApiResponse({\n    status: 200,\n    description: 'Filter posts by author or category',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'To filter, please provide an author or category',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Posts not founded',\n  })\n  @ApiResponse({ status: 500, description: 'Internal Server Error' })\n  async filterByCategory(\n    @Query('category') category,\n    @Query('author') author,\n    @Res() res: Response,\n  ) {\n    try {\n      const data = await this.postsService.filterByCategory(category, author);\n      return res.status(200).json(data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Get('/:id')\n  @ApiOperation({ summary: 'Returns a post wich match with the ID' })\n  @ApiResponse({\n    status: 200,\n    description: 'Returns a post wich match with the ID',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Post not founded',\n  })\n  @ApiResponse({ status: 500, description: 'Internal Server Error' })\n  async getUserById(@Param('id') id: string, @Res() res: Response) {\n    try {\n      const data = await this.postsService.getPostById(id);\n      return res.status(200).json({ data });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Put('/:id')\n  @ApiOperation({ summary: 'Update post wich match with the ID provided' })\n  @ApiResponse({\n    status: 200,\n    description: 'Update post wich match with the ID provided',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'You can only update your own post',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Post not founded',\n  })\n  @ApiResponse({ status: 500, description: 'Internal Server Error' })\n  async updatePost(\n    @Param('id') id: string,\n    @Req() req: UserRequest,\n    @Body() body: IPost,\n    @Res() res: Response,\n  ) {\n    try {\n      const data = await this.postsService.updatePost(req, id, body);\n      res.status(201).json({ data });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Delete('/:id')\n  @ApiOperation({ summary: 'Delete post wich match with the ID provided' })\n  @ApiResponse({\n    status: 200,\n    description: 'Delete post wich match with the ID provided',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'You can only delete your own post',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Post not founded',\n  })\n  @ApiResponse({ status: 500, description: 'Internal Server Error' })\n  async deleteUser(\n    @Param('id') id: string,\n    @Res() res: Response,\n    @Req() req: UserRequest,\n  ) {\n    try {\n      const data = await this.postsService.deletePost(req, id);\n      return res.status(200).json(data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Get('/user/:userId')\n  @ApiOperation({ summary: 'Returns posts from a specific user' })\n  @ApiResponse({\n    status: 200,\n    description: 'Returns posts from a specific user',\n  })\n  @ApiResponse({\n    status: 404,\n    description: \"This user doesn't have any posts.\",\n  })\n  @ApiResponse({ status: 500, description: 'Internal Server Error' })\n  async getPostByUser(@Param('userId') userId, @Res() res: Response) {\n    try {\n      const data = await this.postsService.getPostByUser(userId);\n      return res.status(200).json(data);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './posts.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Post, PostSchema } from './models/post.schema';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Post.name, schema: PostSchema }]),\n    UsersModule,\n  ],\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                filterByCategory\n                            \n                            \n                                    Async\n                                getPostById\n                            \n                            \n                                    Async\n                                getPostByUser\n                            \n                            \n                                    Async\n                                getPosts\n                            \n                            \n                                    Async\n                                searchPosts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/posts/posts.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(undefined)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/posts/posts.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(req, idParam: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/posts/posts.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                idParam\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        filterByCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    filterByCategory(category: string, author: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/posts/posts.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                author\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/posts/posts.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPostByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPostByUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/posts/posts.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/posts/posts.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        searchPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    searchPosts(query: string, page: string, limit: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/posts/posts.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(req, idParam: string, body: IPost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/posts/posts.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                idParam\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            IPost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Post } from './models/post.schema';\nimport { IPost } from '../../common/interfaces/post';\n\n@Injectable()\nexport class PostsService {\n  constructor(@InjectModel(Post.name) private postModel: Model) {}\n  async createPost({ body, userId, userName }) {\n    const { title, content, categories } = body;\n    if (categories.length === 0) {\n      throw new BadRequestException('Post should be at least one categorie');\n    }\n    const postCreated = await this.postModel.create({\n      title,\n      author: userName,\n      content,\n      categories,\n      userId,\n    });\n    if (!postCreated) {\n      throw new NotFoundException();\n    }\n    return { message: 'Post created successfully', id: postCreated._id };\n  }\n\n  async getPosts(page = 1, limit = 10): Promise {\n    const skip = (page - 1) * limit;\n    const posts = await this.postModel.find().skip(skip).limit(limit).lean();\n    if (!posts || posts.length === 0) {\n      throw new NotFoundException('No posts here');\n    }\n    return posts;\n  }\n\n  async getPostById(id: string) {\n    const post = await this.postModel.findById(id).lean();\n    if (!post) {\n      throw new NotFoundException('Post not founded');\n    }\n    return post;\n  }\n\n  async updatePost(req, idParam: string, body: IPost) {\n    const { id, role } = req.user;\n    const postToUpdate = await this.getPostById(idParam);\n    if (!(postToUpdate.userId.toString() === id || role === 'admin')) {\n      throw new BadRequestException('You can only upd your own post');\n    }\n    const updatedPost = await this.postModel\n      .findByIdAndUpdate(idParam, body)\n      .lean();\n    if (!updatedPost) {\n      throw new NotFoundException('Post not founded');\n    }\n    return { message: 'Post updated successfully', id: updatedPost._id };\n  }\n\n  async deletePost(req, idParam: string): Promise {\n    const { id, role } = req.user;\n    const postToDelete = await this.getPostById(idParam);\n    if (!(postToDelete.userId.toString() === id || role === 'admin')) {\n      throw new BadRequestException('You can only delete your own post');\n    }\n    const postDeleted = await this.postModel.findByIdAndDelete(idParam);\n    if (!postDeleted) {\n      throw new NotFoundException('Post not founded');\n    }\n    return { message: 'Post deleted successfully' };\n  }\n\n  async getPostByUser(userId: string) {\n    const posts = await this.postModel\n      .find({ userId })\n      .populate({\n        path: 'userId',\n        select: '_id',\n      })\n      .lean();\n    if (!posts || posts.length === 0) {\n      throw new NotFoundException(`This user doesn't have any posts.`);\n    }\n    return posts;\n  }\n\n  async searchPosts(query: string, page: string, limit: string) {\n    if (!query || query === '') {\n      throw new NotFoundException('Provide a title');\n    }\n    const pageInt = parseInt(page);\n    const limitInt = parseInt(limit);\n    const results = await this.postModel\n      .find({\n        $or: [\n          { title: { $regex: query, $options: 'i' } },\n          { content: { $regex: query, $options: 'i' } },\n        ],\n      })\n      .skip((pageInt - 1) * limitInt)\n      .limit(limitInt)\n      .lean();\n    if (!results) {\n      throw new NotFoundException('Posts not founded');\n    }\n    return results;\n  }\n\n  async filterByCategory(category: string, author: string) {\n    let query = {};\n    if (category && author) {\n      query = { categories: category, author };\n    } else if (category) {\n      query = { categories: category };\n    } else if (author) {\n      query = { author };\n    } else {\n      throw new BadRequestException(\n        'To filter, please provide an author or category',\n      );\n    }\n    const posts = await this.postModel.find(query);\n    if (!posts) {\n      throw new NotFoundException('Posts not founded');\n    }\n    return posts;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/roles.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/guards/roles.guard.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLE_KEY } from '../decorators/roles.decorators';\nimport { Role } from 'src/common/enums/role.enum';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n  canActivate(context: ExecutionContext): boolean {\n    const roles = this.reflector.getAllAndOverride(ROLE_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!roles) {\n      return false;\n    }\n    const request = context.switchToHttp().getRequest();\n    const { user } = request;\n    return roles.some((role) => user.role?.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUp.html":{"url":"classes/SignUp.html","title":"class - SignUp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/auth-dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Login\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty({example: 'example@example.com', description: 'email'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         Login\n\n                            \n                        \n                    \n                        \n                                Defined in         Login:31\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiProperty({example: 'John Doe', description: 'username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth-dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@Matches(/[\\W]/, {message: 'La contraseña debe contener al menos un carácter especial.'})@ApiProperty({example: 'Example1234.', description: 'password'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         Login\n\n                            \n                        \n                    \n                        \n                                Defined in         Login:38\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'user, admin', description: 'role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth-dto.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsNotEmpty,\n  IsEmail,\n  Matches,\n  IsOptional,\n} from 'class-validator';\nimport { Role } from 'src/common/enums/role.enum';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class Login {\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({ example: 'example@example.com', description: 'email' })\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ example: 'Example1234.', description: 'password' })\n  password: string;\n}\n\nexport class SignUp extends Login {\n  @IsOptional()\n  @ApiProperty({ example: 'John Doe', description: 'username' })\n  name?: string;\n\n  @IsEmail()\n  @ApiProperty({ example: 'example@example.com', description: 'email' })\n  email: string;\n\n  @IsNotEmpty()\n  @Matches(/[\\W]/, {\n    message: 'La contraseña debe contener al menos un carácter especial.',\n  })\n  @ApiProperty({ example: 'Example1234.', description: 'password' })\n  password: string;\n  @ApiProperty({ example: 'user, admin', description: 'role' })\n  role: Role;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-user.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEmail()@ApiProperty({example: 'example@example.com', description: 'email'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/update-user.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiProperty({example: 'John Doe', description: 'username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/update-user.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiProperty({example: 'Example', description: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/update-user.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiProperty({example: 'user, admin', description: 'role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/update-user.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString, IsEmail } from 'class-validator';\nimport { Role } from 'src/common/enums/role.enum';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateUserDto {\n  @IsOptional()\n  @IsString()\n  @ApiProperty({ example: 'John Doe', description: 'username' })\n  readonly name?: string;\n\n  @IsOptional()\n  @IsEmail()\n  @ApiProperty({ example: 'example@example.com', description: 'email' })\n  readonly email?: string;\n\n  @IsOptional()\n  @ApiProperty({ example: 'user, admin', description: 'role' })\n  readonly role?: Role;\n\n  @IsOptional()\n  @ApiProperty({ example: 'Example', description: 'password' })\n  readonly password?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/models/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/models/user.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/models/user.schema.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/models/user.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: String, enum: Role, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/models/user.schema.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\nimport { Role } from 'src/common/enums/role.enum';\n\nexport type UserDocument = HydratedDocument;\n\n@Schema()\nexport class User {\n  @Prop({ type: String, required: true })\n  name: string;\n\n  @Prop({ type: String, required: true, unique: true })\n  email: string;\n\n  @Prop({ type: String, required: true })\n  password: string;\n\n  @Prop({ type: String, enum: Role, default: Role.USER })\n  role: Role;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserPayload.html":{"url":"interfaces/UserPayload.html","title":"interface - UserPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/payload-user.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserPayload {\n  id: string;\n  name: string;\n  role: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserRequest.html":{"url":"interfaces/UserRequest.html","title":"interface - UserRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/user-request.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface UserRequest extends Request {\n  user: {\n    id: string;\n    name: string;\n    role: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                deleteUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getUserById\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.ADMIN)@UseGuards(JwtAuthGuard, RolesGuard)@ApiOperation({summary: 'Delete an user wich match with the ID provided'})@ApiResponse({status: 200, description: 'Delete user'})@ApiResponse({status: 404, description: 'User not founded'})@ApiResponse({status: 400, description: 'Invalid User ID'})@ApiResponse({status: 404, description: 'User not founded'})@ApiResponse({status: 500, description: 'Internal Server Error'})@Delete('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsers(req: UserRequest, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.ADMIN)@UseGuards(JwtAuthGuard, RolesGuard)@Get()@ApiOperation({summary: 'Return a users list'})@ApiResponse({status: 200, description: 'Users list'})@ApiResponse({status: 404, description: 'There are no users here'})@ApiResponse({status: 500, description: 'Internal Server Error'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            UserRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.ADMIN, Role.USER)@UseGuards(JwtAuthGuard, RolesGuard)@Get('/:id')@ApiOperation({summary: 'Return user wich match with the ID provided'})@ApiResponse({status: 200, description: 'Return user wich match with the ID provided', type: UpdateUserDto})@ApiResponse({status: 404, description: 'User not founded'})@ApiResponse({status: 500, description: 'Internal Server Error'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(id: string, body: UpdateUserDto, res: Response, req: UserRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Roles(Role.ADMIN, Role.USER)@UseGuards(JwtAuthGuard, RolesGuard)@Put('/:id')@ApiOperation({summary: 'Update an user wich match with the ID provided'})@ApiResponse({status: 200, description: 'Update user'})@ApiResponse({status: 401, description: 'You can only edit your own profile'})@ApiResponse({status: 401, description: 'Role and password cannot be changed'})@ApiResponse({status: 404, description: 'User not founded'})@ApiResponse({status: 500, description: 'Internal Server Error'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/users/users.controller.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            UserRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Put,\n  Req,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { Response } from 'express';\nimport { UpdateUserDto } from './dto/update-user';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorators';\nimport { Role } from 'src/common/enums/role.enum';\nimport { UserRequest } from 'src/common/interfaces/user-request';\nimport { ApiResponse, ApiTags, ApiOperation } from '@nestjs/swagger';\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Roles(Role.ADMIN)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get()\n  @ApiOperation({ summary: 'Return a users list' })\n  @ApiResponse({ status: 200, description: 'Users list' })\n  @ApiResponse({ status: 404, description: 'There are no users here' })\n  @ApiResponse({ status: 500, description: 'Internal Server Error' })\n  async getAllUsers(@Req() req: UserRequest, @Res() res: Response) {\n    try {\n      const data = await this.usersService.getUsers();\n      return res.status(200).json(data);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Roles(Role.ADMIN, Role.USER)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Get('/:id')\n  @ApiOperation({ summary: 'Return user wich match with the ID provided' })\n  @ApiResponse({\n    status: 200,\n    description: 'Return user wich match with the ID provided',\n    type: UpdateUserDto,\n  })\n  @ApiResponse({ status: 404, description: 'User not founded' })\n  @ApiResponse({ status: 500, description: 'Internal Server Error' })\n  async getUserById(@Param('id') id: string, @Res() res: Response) {\n    try {\n      const data = await this.usersService.getUserById(id);\n      return res.status(200).json({ data });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Roles(Role.ADMIN, Role.USER)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Put('/:id')\n  @ApiOperation({ summary: 'Update an user wich match with the ID provided' })\n  @ApiResponse({ status: 200, description: 'Update user' })\n  @ApiResponse({\n    status: 401,\n    description: 'You can only edit your own profile',\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Role and password cannot be changed',\n  })\n  @ApiResponse({ status: 404, description: 'User not founded' })\n  @ApiResponse({ status: 500, description: 'Internal Server Error' })\n  async updateUser(\n    @Param('id') id: string,\n    @Body() body: UpdateUserDto,\n    @Res() res: Response,\n    @Req() req: UserRequest,\n  ) {\n    try {\n      const userId = req.user.id;\n      const data = await this.usersService.updateUser(id, userId, body, req);\n      return res.status(200).json({ data });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  @Roles(Role.ADMIN)\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @ApiOperation({ summary: 'Delete an user wich match with the ID provided' })\n  @ApiResponse({ status: 200, description: 'Delete user' })\n  @ApiResponse({\n    status: 404,\n    description: 'User not founded',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Invalid User ID',\n  })\n  @ApiResponse({ status: 404, description: 'User not founded' })\n  @ApiResponse({ status: 500, description: 'Internal Server Error' })\n  @Delete('/:id')\n  async deleteUser(@Param('id') id: string, @Res() res: Response) {\n    try {\n      const data = await this.usersService.removeUser(id);\n      return res.status(200).json(data);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nUsersModule -->\n\nAuthService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nValidateToken\n\nValidateToken\n\nUsersModule -->\n\nValidateToken->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            UsersService\n                        \n                        \n                            ValidateToken\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './models/user.schema';\nimport { AuthService } from '../auth/auth.service';\nimport { ValidateToken } from '../auth/jwt/jwt.validate';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [UsersController],\n  exports: [UsersService],\n  providers: [UsersService, AuthService, ValidateToken],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                            \n                                    Async\n                                removeUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeUser(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(tokenId: string, paramId: string, body: UpdateUserDto, req)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/users/users.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tokenId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                paramId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { User } from './models/user.schema';\nimport { InjectModel } from '@nestjs/mongoose';\nimport mongoose, { Model } from 'mongoose';\nimport { UpdateUserDto } from './dto/update-user';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel(User.name) private userModel: Model) {}\n\n  async getUsers(): Promise {\n    const users = await this.userModel.find().select('-password').lean();\n    if (!users || users.length === 0) {\n      throw new NotFoundException('There are no users here');\n    }\n    return users;\n  }\n\n  async getUserById(id: string) {\n    const user = await this.userModel.findById(id).select('-password').lean();\n    if (!user) {\n      throw new NotFoundException('User not founded');\n    }\n    return user;\n  }\n\n  async updateUser(tokenId: string, paramId: string, body: UpdateUserDto, req) {\n    const { role } = req.user;\n    if (!(tokenId === paramId || role === 'admin')) {\n      throw new UnauthorizedException('You can only edit your own profile');\n    }\n    if (body.role || body.password) {\n      throw new UnauthorizedException('Role and password cannot be changed');\n    }\n    const updatedUser = await this.userModel\n      .findByIdAndUpdate(paramId, body)\n      .lean();\n    if (!updatedUser) {\n      throw new NotFoundException('User not founded');\n    }\n    return {\n      message: 'User updated successfully',\n    };\n  }\n\n  async removeUser(id: string) {\n    try {\n      if (!mongoose.isValidObjectId(id)) {\n        throw new BadRequestException('Invalid user ID');\n      }\n      const userDeleted = await this.userModel.findByIdAndDelete(id);\n      if (!userDeleted) {\n        throw new NotFoundException('User not founded');\n      }\n      return { message: 'User deleted successfully' };\n    } catch (error) {\n      throw new BadRequestException(error.message);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidateToken.html":{"url":"injectables/ValidateToken.html","title":"injectable - ValidateToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidateToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/jwt/jwt.validate.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwt: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/jwt/jwt.validate.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validateToken\n                        \n                    \n                \n            \n            \n                \nvalidateToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/auth/jwt/jwt.validate.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { JwtService } from '@nestjs/jwt';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ValidateToken {\n  constructor(private jwt: JwtService) {}\n\n  validateToken(token: string) {\n    return this.jwt.verify(token, {\n      secret: process.env.JWT_SECRET_KEY,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/common/interfaces/extended-user.ts\n            \n            interface\n            ExtendedUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interfaces/payload-user.ts\n            \n            interface\n            UserPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/post.ts\n            \n            interface\n            IPost\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/interfaces/user-request.ts\n            \n            interface\n            UserRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interfaces/user.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/admins/admins.controller.ts\n            \n            controller\n            AdminsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/admins/admins.service.ts\n            \n            injectable\n            AdminsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/decorators/roles.decorators.ts\n            \n            variable\n            ROLE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/decorators/roles.decorators.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/auth-dto.ts\n            \n            class\n            Login\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/auth-dto.ts\n            \n            class\n            SignUp\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/jwt/jwt.validate.ts\n            \n            injectable\n            ValidateToken\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/posts/dto/post-update.ts\n            \n            class\n            PostUpdateDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/posts/dto/post.ts\n            \n            class\n            PostDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/posts/models/post.schema.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/posts/models/post.schema.ts\n            \n            variable\n            PostSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-user.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/models/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/models/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/bcrypt-passwords.ts\n            \n            variable\n            comparePassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/bcrypt-passwords.ts\n            \n            variable\n            hashPassword\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/axios : ^3.0.1\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^10.0.2\n        \n            @nestjs/passport : ^10.0.2\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.1.17\n        \n            axios : ^1.6.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            express : ^4.18.2\n        \n            mongoose : ^8.0.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            swagger-ui-express : ^5.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enums/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 MODERATOR\n                            \n                        \n                        \n                            \n                                Value : moderator\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminsModule\n\n\n\ncluster_AdminsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAdminsService\n\nAdminsService\n\n\n\nAdminsModule\n\nAdminsModule\n\nAdminsModule -->\n\nAdminsService->AdminsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\nUsersModule -->\n\nAuthService->UsersModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nValidateToken\n\nValidateToken\n\nUsersModule -->\n\nValidateToken->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostDocument   (src/.../post.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/posts/models/post.schema.ts\n    \n    \n        \n            \n                \n                    \n                    PostDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/users/models/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            comparePassword   (src/.../bcrypt-passwords.ts)\n                        \n                        \n                            hashPassword   (src/.../bcrypt-passwords.ts)\n                        \n                        \n                            PostSchema   (src/.../post.schema.ts)\n                        \n                        \n                            ROLE_KEY   (src/.../roles.decorators.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorators.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/bcrypt-passwords.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n  password: string,\n  hashPassword: string,\n) => {\n  const result = await bcrypt.compare(password, hashPassword);\n  return result;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (password: string) => {\n  const hash = bcrypt.hash(password, 10);\n  return hash;\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/posts/models/post.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PostSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Post)\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/decorators/roles.decorators.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROLE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'role'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...role: Role[]) => SetMetadata(ROLE_KEY, role)\n                    \n                \n\n\n        \n    \n\n    src/modules/users/models/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
